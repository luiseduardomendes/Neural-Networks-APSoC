// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module ScratchpadBank(
  input          clock,
                 reset,
                 io_read_req_valid,
  input  [11:0]  io_read_req_bits_addr,
  input          io_read_req_bits_fromDMA,
                 io_read_resp_ready,
                 io_write_en,
  input  [11:0]  io_write_addr,
  input          io_write_mask_0,
                 io_write_mask_1,
                 io_write_mask_2,
                 io_write_mask_3,
                 io_write_mask_4,
                 io_write_mask_5,
                 io_write_mask_6,
                 io_write_mask_7,
                 io_write_mask_8,
                 io_write_mask_9,
                 io_write_mask_10,
                 io_write_mask_11,
                 io_write_mask_12,
                 io_write_mask_13,
                 io_write_mask_14,
                 io_write_mask_15,
  input  [127:0] io_write_data,
  output         io_read_req_ready,
                 io_read_resp_valid,
  output [127:0] io_read_resp_bits_data,
  output         io_read_resp_bits_fromDMA
);

  wire         _io_read_req_ready_output;	// @[Scratchpad.scala:166:40]
  wire         mem_rdata_MPORT_en;	// @[Scratchpad.scala:152:21]
  wire         _q_io_enq_ready;	// @[Scratchpad.scala:160:17]
  wire         _q_io_deq_valid;	// @[Scratchpad.scala:160:17]
  wire         _q_io_count;	// @[Scratchpad.scala:160:17]
  wire [127:0] _mem_RW0_rdata;	// @[Scratchpad.scala:132:26]
  wire         ren = _io_read_req_ready_output & io_read_req_valid;	// @[Decoupled.scala:51:35, Scratchpad.scala:166:40]
  assign mem_rdata_MPORT_en = ren & ~io_write_en;	// @[Decoupled.scala:51:35, Scratchpad.scala:152:{21,24}]
  reg          q_io_enq_valid_REG;	// @[Scratchpad.scala:161:28]
  reg          q_io_enq_bits_fromDMA_REG;	// @[Scratchpad.scala:163:35]
  assign _io_read_req_ready_output = {1'h0, _q_io_count} + {1'h0, _q_io_enq_ready & q_io_enq_valid_REG} - {1'h0, io_read_resp_ready & _q_io_deq_valid} == 2'h0 & ~io_write_en;	// @[Decoupled.scala:51:35, Scratchpad.scala:160:17, :161:28, :165:{37,55,71}, :166:{40,43}]
  always @(posedge clock) begin
    q_io_enq_valid_REG <= ren;	// @[Decoupled.scala:51:35, Scratchpad.scala:161:28]
    q_io_enq_bits_fromDMA_REG <= io_read_req_bits_fromDMA;	// @[Scratchpad.scala:163:35]
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[Scratchpad.scala:151:11]
      if (~reset & ren & io_write_en) begin	// @[Decoupled.scala:51:35, Scratchpad.scala:151:11]
        if (`ASSERT_VERBOSE_COND_)	// @[Scratchpad.scala:151:11]
          $error("Assertion failed\n    at Scratchpad.scala:151 assert(!(ren && io.write.en))\n");	// @[Scratchpad.scala:151:11]
        if (`STOP_COND_)	// @[Scratchpad.scala:151:11]
          $fatal;	// @[Scratchpad.scala:151:11]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        q_io_enq_valid_REG = _RANDOM_0[0];	// @[Scratchpad.scala:161:28]
        q_io_enq_bits_fromDMA_REG = _RANDOM_0[1];	// @[Scratchpad.scala:161:28, :163:35]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  mem mem (	// @[Scratchpad.scala:132:26]
    .RW0_addr  (io_write_en ? io_write_addr : io_read_req_bits_addr),	// @[Scratchpad.scala:132:26]
    .RW0_en    (mem_rdata_MPORT_en | io_write_en),	// @[Scratchpad.scala:132:26, :152:21]
    .RW0_clk   (clock),
    .RW0_wmode (io_write_en),
    .RW0_wdata (io_write_data),
    .RW0_wmask ({io_write_mask_15, io_write_mask_14, io_write_mask_13, io_write_mask_12, io_write_mask_11, io_write_mask_10, io_write_mask_9, io_write_mask_8, io_write_mask_7, io_write_mask_6, io_write_mask_5, io_write_mask_4, io_write_mask_3, io_write_mask_2, io_write_mask_1, io_write_mask_0}),	// @[Scratchpad.scala:132:26]
    .RW0_rdata (_mem_RW0_rdata)
  );
  Queue_84 q (	// @[Scratchpad.scala:160:17]
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (q_io_enq_valid_REG),	// @[Scratchpad.scala:161:28]
    .io_enq_bits_data    (_mem_RW0_rdata),	// @[Scratchpad.scala:132:26]
    .io_enq_bits_fromDMA (q_io_enq_bits_fromDMA_REG),	// @[Scratchpad.scala:163:35]
    .io_deq_ready        (io_read_resp_ready),
    .io_enq_ready        (_q_io_enq_ready),
    .io_deq_valid        (_q_io_deq_valid),
    .io_deq_bits_data    (io_read_resp_bits_data),
    .io_deq_bits_fromDMA (io_read_resp_bits_fromDMA),
    .io_count            (_q_io_count)
  );
  assign io_read_req_ready = _io_read_req_ready_output;	// @[Scratchpad.scala:166:40]
  assign io_read_resp_valid = _q_io_deq_valid;	// @[Scratchpad.scala:160:17]
endmodule

