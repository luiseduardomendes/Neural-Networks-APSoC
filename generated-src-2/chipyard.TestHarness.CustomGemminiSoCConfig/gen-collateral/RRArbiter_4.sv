// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module RRArbiter_4(
  input         clock,
                io_in_0_valid,
  input  [39:0] io_in_0_bits_tlb_req_vaddr,
  input         io_in_0_bits_status_debug,
                io_in_0_bits_status_mxr,
                io_in_0_bits_status_sum,
                io_in_1_valid,
  input  [39:0] io_in_1_bits_tlb_req_vaddr,
  input         io_in_1_bits_status_debug,
                io_in_1_bits_status_mxr,
                io_in_1_bits_status_sum,
  output        io_in_0_ready,
                io_in_1_ready,
                io_out_valid,
  output [39:0] io_out_bits_tlb_req_vaddr,
  output [4:0]  io_out_bits_tlb_req_cmd,
  output        io_out_bits_status_debug,
                io_out_bits_status_mxr,
                io_out_bits_status_sum
);

  wire choice;	// @[Arbiter.scala:91:26, :93:{24,33}]
  wire _io_out_valid_output = choice ? io_in_1_valid : io_in_0_valid;	// @[Arbiter.scala:55:16, :91:26, :93:{24,33}]
  reg  lastGrant;	// @[Reg.scala:19:16]
  wire validMask_1 = io_in_1_valid & ~lastGrant;	// @[Arbiter.scala:81:49, :82:76, Reg.scala:19:16]
  assign choice = validMask_1 | ~io_in_0_valid;	// @[Arbiter.scala:82:76, :89:41, :91:{26,35}, :93:{24,33}]
  always @(posedge clock) begin
    if (_io_out_valid_output)	// @[Arbiter.scala:55:16]
      lastGrant <= choice;	// @[Arbiter.scala:91:26, :93:{24,33}, Reg.scala:19:16]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        lastGrant = _RANDOM_0[0];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_in_0_ready = ~validMask_1;	// @[Arbiter.scala:45:78, :82:76]
  assign io_in_1_ready = ~lastGrant | ~(validMask_1 | io_in_0_valid);	// @[Arbiter.scala:45:{68,78}, :81:49, :82:76, :86:50, Reg.scala:19:16]
  assign io_out_valid = _io_out_valid_output;	// @[Arbiter.scala:55:16]
  assign io_out_bits_tlb_req_vaddr = choice ? io_in_1_bits_tlb_req_vaddr : io_in_0_bits_tlb_req_vaddr;	// @[Arbiter.scala:55:16, :91:26, :93:{24,33}]
  assign io_out_bits_tlb_req_cmd = {4'h0, ~choice};	// @[Arbiter.scala:55:16, :91:26, :93:{24,33}]
  assign io_out_bits_status_debug = choice ? io_in_1_bits_status_debug : io_in_0_bits_status_debug;	// @[Arbiter.scala:55:16, :91:26, :93:{24,33}]
  assign io_out_bits_status_mxr = choice ? io_in_1_bits_status_mxr : io_in_0_bits_status_mxr;	// @[Arbiter.scala:55:16, :91:26, :93:{24,33}]
  assign io_out_bits_status_sum = choice ? io_in_1_bits_status_sum : io_in_0_bits_status_sum;	// @[Arbiter.scala:55:16, :91:26, :93:{24,33}]
endmodule

