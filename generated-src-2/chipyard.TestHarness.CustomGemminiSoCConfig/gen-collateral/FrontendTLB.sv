// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FrontendTLB(
  input         clock,
                reset,
                io_clients_0_req_valid,
  input  [39:0] io_clients_0_req_bits_tlb_req_vaddr,
  input         io_clients_0_req_bits_status_debug,
                io_clients_0_req_bits_status_mxr,
                io_clients_0_req_bits_status_sum,
                io_clients_1_req_valid,
  input  [39:0] io_clients_1_req_bits_tlb_req_vaddr,
  input         io_clients_1_req_bits_status_debug,
                io_clients_1_req_bits_status_mxr,
                io_clients_1_req_bits_status_sum,
                io_ptw_0_req_ready,
                io_ptw_0_resp_valid,
                io_ptw_0_resp_bits_ae_ptw,
                io_ptw_0_resp_bits_ae_final,
                io_ptw_0_resp_bits_pf,
                io_ptw_0_resp_bits_gf,
                io_ptw_0_resp_bits_hr,
                io_ptw_0_resp_bits_hw,
                io_ptw_0_resp_bits_hx,
  input  [43:0] io_ptw_0_resp_bits_pte_ppn,
  input         io_ptw_0_resp_bits_pte_d,
                io_ptw_0_resp_bits_pte_a,
                io_ptw_0_resp_bits_pte_g,
                io_ptw_0_resp_bits_pte_u,
                io_ptw_0_resp_bits_pte_x,
                io_ptw_0_resp_bits_pte_w,
                io_ptw_0_resp_bits_pte_r,
                io_ptw_0_resp_bits_pte_v,
  input  [1:0]  io_ptw_0_resp_bits_level,
  input         io_ptw_0_resp_bits_homogeneous,
  input  [3:0]  io_ptw_0_ptbr_mode,
  input         io_ptw_0_pmp_0_cfg_l,
  input  [1:0]  io_ptw_0_pmp_0_cfg_a,
  input         io_ptw_0_pmp_0_cfg_x,
                io_ptw_0_pmp_0_cfg_w,
                io_ptw_0_pmp_0_cfg_r,
  input  [29:0] io_ptw_0_pmp_0_addr,
  input  [31:0] io_ptw_0_pmp_0_mask,
  input         io_ptw_0_pmp_1_cfg_l,
  input  [1:0]  io_ptw_0_pmp_1_cfg_a,
  input         io_ptw_0_pmp_1_cfg_x,
                io_ptw_0_pmp_1_cfg_w,
                io_ptw_0_pmp_1_cfg_r,
  input  [29:0] io_ptw_0_pmp_1_addr,
  input  [31:0] io_ptw_0_pmp_1_mask,
  input         io_ptw_0_pmp_2_cfg_l,
  input  [1:0]  io_ptw_0_pmp_2_cfg_a,
  input         io_ptw_0_pmp_2_cfg_x,
                io_ptw_0_pmp_2_cfg_w,
                io_ptw_0_pmp_2_cfg_r,
  input  [29:0] io_ptw_0_pmp_2_addr,
  input  [31:0] io_ptw_0_pmp_2_mask,
  input         io_ptw_0_pmp_3_cfg_l,
  input  [1:0]  io_ptw_0_pmp_3_cfg_a,
  input         io_ptw_0_pmp_3_cfg_x,
                io_ptw_0_pmp_3_cfg_w,
                io_ptw_0_pmp_3_cfg_r,
  input  [29:0] io_ptw_0_pmp_3_addr,
  input  [31:0] io_ptw_0_pmp_3_mask,
  input         io_ptw_0_pmp_4_cfg_l,
  input  [1:0]  io_ptw_0_pmp_4_cfg_a,
  input         io_ptw_0_pmp_4_cfg_x,
                io_ptw_0_pmp_4_cfg_w,
                io_ptw_0_pmp_4_cfg_r,
  input  [29:0] io_ptw_0_pmp_4_addr,
  input  [31:0] io_ptw_0_pmp_4_mask,
  input         io_ptw_0_pmp_5_cfg_l,
  input  [1:0]  io_ptw_0_pmp_5_cfg_a,
  input         io_ptw_0_pmp_5_cfg_x,
                io_ptw_0_pmp_5_cfg_w,
                io_ptw_0_pmp_5_cfg_r,
  input  [29:0] io_ptw_0_pmp_5_addr,
  input  [31:0] io_ptw_0_pmp_5_mask,
  input         io_ptw_0_pmp_6_cfg_l,
  input  [1:0]  io_ptw_0_pmp_6_cfg_a,
  input         io_ptw_0_pmp_6_cfg_x,
                io_ptw_0_pmp_6_cfg_w,
                io_ptw_0_pmp_6_cfg_r,
  input  [29:0] io_ptw_0_pmp_6_addr,
  input  [31:0] io_ptw_0_pmp_6_mask,
  input         io_ptw_0_pmp_7_cfg_l,
  input  [1:0]  io_ptw_0_pmp_7_cfg_a,
  input         io_ptw_0_pmp_7_cfg_x,
                io_ptw_0_pmp_7_cfg_w,
                io_ptw_0_pmp_7_cfg_r,
  input  [29:0] io_ptw_0_pmp_7_addr,
  input  [31:0] io_ptw_0_pmp_7_mask,
  input         io_exp_0_flush_retry,
                io_exp_0_flush_skip,
  output        io_clients_0_resp_miss,
  output [31:0] io_clients_0_resp_paddr,
  output        io_clients_1_resp_miss,
  output [31:0] io_clients_1_resp_paddr,
  output        io_ptw_0_req_valid,
  output [26:0] io_ptw_0_req_bits_bits_addr,
  output        io_ptw_0_req_bits_bits_need_gpa,
                io_ptw_0_req_bits_bits_vstage1,
                io_ptw_0_req_bits_bits_stage2,
                io_exp_0_interrupt,
                io_counter_event_signal_15,
                io_counter_event_signal_16,
                io_counter_event_signal_17
);

  reg         tlbArbOpt_io_in_1_valid_REG;	// @[FrontendTLB.scala:130:27]
  reg         tlbArbOpt_io_in_0_valid_REG;	// @[FrontendTLB.scala:130:27]
  wire        _tlbArbOpt_io_in_0_ready;	// @[FrontendTLB.scala:107:50]
  wire        _tlbArbOpt_io_in_1_ready;	// @[FrontendTLB.scala:107:50]
  wire        _tlbArbOpt_io_out_valid;	// @[FrontendTLB.scala:107:50]
  wire [39:0] _tlbArbOpt_io_out_bits_tlb_req_vaddr;	// @[FrontendTLB.scala:107:50]
  wire [4:0]  _tlbArbOpt_io_out_bits_tlb_req_cmd;	// @[FrontendTLB.scala:107:50]
  wire        _tlbArbOpt_io_out_bits_status_debug;	// @[FrontendTLB.scala:107:50]
  wire        _tlbArbOpt_io_out_bits_status_mxr;	// @[FrontendTLB.scala:107:50]
  wire        _tlbArbOpt_io_out_bits_status_sum;	// @[FrontendTLB.scala:107:50]
  wire        _tlbs_0_io_resp_miss;	// @[FrontendTLB.scala:102:39]
  wire [31:0] _tlbs_0_io_resp_paddr;	// @[FrontendTLB.scala:102:39]
  reg         last_translated_valid;	// @[FrontendTLB.scala:118:40]
  reg  [38:0] last_translated_vpn;	// @[FrontendTLB.scala:119:38]
  reg  [31:0] last_translated_ppn;	// @[FrontendTLB.scala:120:38]
  wire        tlbReqFire = _tlbArbOpt_io_in_0_ready & tlbArbOpt_io_in_0_valid_REG;	// @[Decoupled.scala:51:35, FrontendTLB.scala:107:50, :130:27]
  reg  [39:0] tlbArbOpt_io_in_0_bits_REG_tlb_req_vaddr;	// @[FrontendTLB.scala:131:22]
  reg         tlbArbOpt_io_in_0_bits_REG_status_debug;	// @[FrontendTLB.scala:131:22]
  reg         tlbArbOpt_io_in_0_bits_REG_status_mxr;	// @[FrontendTLB.scala:131:22]
  reg         tlbArbOpt_io_in_0_bits_REG_status_sum;	// @[FrontendTLB.scala:131:22]
  reg  [31:0] io_clients_0_resp_paddr_REG;	// @[FrontendTLB.scala:147:35]
  reg         io_clients_0_resp_miss_REG;	// @[FrontendTLB.scala:148:35]
  reg         last_translated_valid_1;	// @[FrontendTLB.scala:118:40]
  reg  [38:0] last_translated_vpn_1;	// @[FrontendTLB.scala:119:38]
  reg  [31:0] last_translated_ppn_1;	// @[FrontendTLB.scala:120:38]
  wire        tlbReqFire_1 = _tlbArbOpt_io_in_1_ready & tlbArbOpt_io_in_1_valid_REG;	// @[Decoupled.scala:51:35, FrontendTLB.scala:107:50, :130:27]
  reg  [39:0] tlbArbOpt_io_in_1_bits_REG_tlb_req_vaddr;	// @[FrontendTLB.scala:131:22]
  reg         tlbArbOpt_io_in_1_bits_REG_status_debug;	// @[FrontendTLB.scala:131:22]
  reg         tlbArbOpt_io_in_1_bits_REG_status_mxr;	// @[FrontendTLB.scala:131:22]
  reg         tlbArbOpt_io_in_1_bits_REG_status_sum;	// @[FrontendTLB.scala:131:22]
  reg  [31:0] io_clients_1_resp_paddr_REG;	// @[FrontendTLB.scala:147:35]
  reg         io_clients_1_resp_miss_REG;	// @[FrontendTLB.scala:148:35]
  wire        _T_1 = tlbReqFire & ~_tlbs_0_io_resp_miss;	// @[Decoupled.scala:51:35, FrontendTLB.scala:102:39, :133:{22,25}]
  wire        _T_5 = io_exp_0_flush_retry | io_exp_0_flush_skip;	// @[FrontendTLB.scala:25:49]
  wire        _T_4 = tlbReqFire_1 & ~_tlbs_0_io_resp_miss;	// @[Decoupled.scala:51:35, FrontendTLB.scala:102:39, :133:{22,25}]
  wire        l0_tlb_hit = last_translated_valid & io_clients_0_req_bits_tlb_req_vaddr[39:12] == {1'h0, last_translated_vpn[38:12]};	// @[FrontendTLB.scala:118:40, :119:38, :122:{44,79,100,125}]
  wire        l0_tlb_hit_1 = last_translated_valid_1 & io_clients_1_req_bits_tlb_req_vaddr[39:12] == {1'h0, last_translated_vpn_1[38:12]};	// @[FrontendTLB.scala:118:40, :119:38, :122:{44,79,100,125}]
  always @(posedge clock) begin
    if (reset) begin
      last_translated_valid <= 1'h0;	// @[FrontendTLB.scala:118:40]
      last_translated_vpn <= 39'h0;	// @[FrontendTLB.scala:119:38]
      last_translated_ppn <= 32'h0;	// @[FrontendTLB.scala:120:38]
      last_translated_valid_1 <= 1'h0;	// @[FrontendTLB.scala:118:40]
      last_translated_vpn_1 <= 39'h0;	// @[FrontendTLB.scala:119:38]
      last_translated_ppn_1 <= 32'h0;	// @[FrontendTLB.scala:120:38]
    end
    else begin
      last_translated_valid <= ~_T_5 & (_T_1 | last_translated_valid);	// @[FrontendTLB.scala:25:49, :118:40, :133:{22,44}, :134:29, :139:31, :140:29]
      if (_T_1) begin	// @[FrontendTLB.scala:133:22]
        last_translated_vpn <= tlbArbOpt_io_in_0_bits_REG_tlb_req_vaddr[38:0];	// @[FrontendTLB.scala:119:38, :131:22, :135:27]
        last_translated_ppn <= _tlbs_0_io_resp_paddr;	// @[FrontendTLB.scala:102:39, :120:38]
      end
      last_translated_valid_1 <= ~_T_5 & (_T_4 | last_translated_valid_1);	// @[FrontendTLB.scala:25:49, :118:40, :133:{22,44}, :134:29, :139:31, :140:29]
      if (_T_4) begin	// @[FrontendTLB.scala:133:22]
        last_translated_vpn_1 <= tlbArbOpt_io_in_1_bits_REG_tlb_req_vaddr[38:0];	// @[FrontendTLB.scala:119:38, :131:22, :135:27]
        last_translated_ppn_1 <= _tlbs_0_io_resp_paddr;	// @[FrontendTLB.scala:102:39, :120:38]
      end
    end
    tlbArbOpt_io_in_0_valid_REG <= io_clients_0_req_valid & ~l0_tlb_hit;	// @[FrontendTLB.scala:122:44, :130:{27,45,48}]
    tlbArbOpt_io_in_0_bits_REG_tlb_req_vaddr <= io_clients_0_req_bits_tlb_req_vaddr;	// @[FrontendTLB.scala:131:22]
    tlbArbOpt_io_in_0_bits_REG_status_debug <= io_clients_0_req_bits_status_debug;	// @[FrontendTLB.scala:131:22]
    tlbArbOpt_io_in_0_bits_REG_status_mxr <= io_clients_0_req_bits_status_mxr;	// @[FrontendTLB.scala:131:22]
    tlbArbOpt_io_in_0_bits_REG_status_sum <= io_clients_0_req_bits_status_sum;	// @[FrontendTLB.scala:131:22]
    io_clients_0_resp_paddr_REG <= {last_translated_ppn[31:12], io_clients_0_req_bits_tlb_req_vaddr[11:0]};	// @[Cat.scala:33:92, FrontendTLB.scala:120:38, :123:{48,91}, :147:35]
    io_clients_0_resp_miss_REG <= l0_tlb_hit;	// @[FrontendTLB.scala:122:44, :148:35]
    tlbArbOpt_io_in_1_valid_REG <= io_clients_1_req_valid & ~l0_tlb_hit_1;	// @[FrontendTLB.scala:122:44, :130:{27,45,48}]
    tlbArbOpt_io_in_1_bits_REG_tlb_req_vaddr <= io_clients_1_req_bits_tlb_req_vaddr;	// @[FrontendTLB.scala:131:22]
    tlbArbOpt_io_in_1_bits_REG_status_debug <= io_clients_1_req_bits_status_debug;	// @[FrontendTLB.scala:131:22]
    tlbArbOpt_io_in_1_bits_REG_status_mxr <= io_clients_1_req_bits_status_mxr;	// @[FrontendTLB.scala:131:22]
    tlbArbOpt_io_in_1_bits_REG_status_sum <= io_clients_1_req_bits_status_sum;	// @[FrontendTLB.scala:131:22]
    io_clients_1_resp_paddr_REG <= {last_translated_ppn_1[31:12], io_clients_1_req_bits_tlb_req_vaddr[11:0]};	// @[Cat.scala:33:92, FrontendTLB.scala:120:38, :123:{48,91}, :147:35]
    io_clients_1_resp_miss_REG <= l0_tlb_hit_1;	// @[FrontendTLB.scala:122:44, :148:35]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        last_translated_valid = _RANDOM_0[0];	// @[FrontendTLB.scala:118:40]
        last_translated_vpn = {_RANDOM_0[31:1], _RANDOM_1[7:0]};	// @[FrontendTLB.scala:118:40, :119:38]
        last_translated_ppn = {_RANDOM_1[31:8], _RANDOM_2[7:0]};	// @[FrontendTLB.scala:119:38, :120:38]
        tlbArbOpt_io_in_0_valid_REG = _RANDOM_2[8];	// @[FrontendTLB.scala:120:38, :130:27]
        tlbArbOpt_io_in_0_bits_REG_tlb_req_vaddr = {_RANDOM_2[31:9], _RANDOM_3[16:0]};	// @[FrontendTLB.scala:120:38, :131:22]
        tlbArbOpt_io_in_0_bits_REG_status_debug = _RANDOM_3[28];	// @[FrontendTLB.scala:131:22]
        tlbArbOpt_io_in_0_bits_REG_status_mxr = _RANDOM_6[17];	// @[FrontendTLB.scala:131:22]
        tlbArbOpt_io_in_0_bits_REG_status_sum = _RANDOM_6[18];	// @[FrontendTLB.scala:131:22]
        io_clients_0_resp_paddr_REG = {_RANDOM_7[31:5], _RANDOM_8[4:0]};	// @[FrontendTLB.scala:147:35]
        io_clients_0_resp_miss_REG = _RANDOM_8[5];	// @[FrontendTLB.scala:147:35, :148:35]
        last_translated_valid_1 = _RANDOM_8[6];	// @[FrontendTLB.scala:118:40, :147:35]
        last_translated_vpn_1 = {_RANDOM_8[31:7], _RANDOM_9[13:0]};	// @[FrontendTLB.scala:119:38, :147:35]
        last_translated_ppn_1 = {_RANDOM_9[31:14], _RANDOM_10[13:0]};	// @[FrontendTLB.scala:119:38, :120:38]
        tlbArbOpt_io_in_1_valid_REG = _RANDOM_10[14];	// @[FrontendTLB.scala:120:38, :130:27]
        tlbArbOpt_io_in_1_bits_REG_tlb_req_vaddr = {_RANDOM_10[31:15], _RANDOM_11[22:0]};	// @[FrontendTLB.scala:120:38, :131:22]
        tlbArbOpt_io_in_1_bits_REG_status_debug = _RANDOM_12[2];	// @[FrontendTLB.scala:131:22]
        tlbArbOpt_io_in_1_bits_REG_status_mxr = _RANDOM_14[23];	// @[FrontendTLB.scala:131:22]
        tlbArbOpt_io_in_1_bits_REG_status_sum = _RANDOM_14[24];	// @[FrontendTLB.scala:131:22]
        io_clients_1_resp_paddr_REG = {_RANDOM_15[31:11], _RANDOM_16[10:0]};	// @[FrontendTLB.scala:147:35]
        io_clients_1_resp_miss_REG = _RANDOM_16[11];	// @[FrontendTLB.scala:147:35, :148:35]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  DecoupledTLB tlbs_0 (	// @[FrontendTLB.scala:102:39]
    .clock                           (clock),
    .reset                           (reset),
    .io_req_valid                    (_tlbArbOpt_io_out_valid),	// @[FrontendTLB.scala:107:50]
    .io_req_bits_tlb_req_vaddr       (_tlbArbOpt_io_out_bits_tlb_req_vaddr),	// @[FrontendTLB.scala:107:50]
    .io_req_bits_tlb_req_passthrough (1'h0),
    .io_req_bits_tlb_req_size        (3'h0),	// @[FrontendTLB.scala:113:21]
    .io_req_bits_tlb_req_cmd         (_tlbArbOpt_io_out_bits_tlb_req_cmd),	// @[FrontendTLB.scala:107:50]
    .io_req_bits_tlb_req_prv         (2'h0),	// @[FrontendTLB.scala:107:50]
    .io_req_bits_status_debug        (_tlbArbOpt_io_out_bits_status_debug),	// @[FrontendTLB.scala:107:50]
    .io_req_bits_status_mxr          (_tlbArbOpt_io_out_bits_status_mxr),	// @[FrontendTLB.scala:107:50]
    .io_req_bits_status_sum          (_tlbArbOpt_io_out_bits_status_sum),	// @[FrontendTLB.scala:107:50]
    .io_ptw_req_ready                (io_ptw_0_req_ready),
    .io_ptw_resp_valid               (io_ptw_0_resp_valid),
    .io_ptw_resp_bits_ae_ptw         (io_ptw_0_resp_bits_ae_ptw),
    .io_ptw_resp_bits_ae_final       (io_ptw_0_resp_bits_ae_final),
    .io_ptw_resp_bits_pf             (io_ptw_0_resp_bits_pf),
    .io_ptw_resp_bits_gf             (io_ptw_0_resp_bits_gf),
    .io_ptw_resp_bits_hr             (io_ptw_0_resp_bits_hr),
    .io_ptw_resp_bits_hw             (io_ptw_0_resp_bits_hw),
    .io_ptw_resp_bits_hx             (io_ptw_0_resp_bits_hx),
    .io_ptw_resp_bits_pte_ppn        (io_ptw_0_resp_bits_pte_ppn),
    .io_ptw_resp_bits_pte_d          (io_ptw_0_resp_bits_pte_d),
    .io_ptw_resp_bits_pte_a          (io_ptw_0_resp_bits_pte_a),
    .io_ptw_resp_bits_pte_g          (io_ptw_0_resp_bits_pte_g),
    .io_ptw_resp_bits_pte_u          (io_ptw_0_resp_bits_pte_u),
    .io_ptw_resp_bits_pte_x          (io_ptw_0_resp_bits_pte_x),
    .io_ptw_resp_bits_pte_w          (io_ptw_0_resp_bits_pte_w),
    .io_ptw_resp_bits_pte_r          (io_ptw_0_resp_bits_pte_r),
    .io_ptw_resp_bits_pte_v          (io_ptw_0_resp_bits_pte_v),
    .io_ptw_resp_bits_level          (io_ptw_0_resp_bits_level),
    .io_ptw_resp_bits_homogeneous    (io_ptw_0_resp_bits_homogeneous),
    .io_ptw_ptbr_mode                (io_ptw_0_ptbr_mode),
    .io_ptw_pmp_0_cfg_l              (io_ptw_0_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a              (io_ptw_0_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x              (io_ptw_0_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w              (io_ptw_0_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r              (io_ptw_0_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr               (io_ptw_0_pmp_0_addr),
    .io_ptw_pmp_0_mask               (io_ptw_0_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l              (io_ptw_0_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a              (io_ptw_0_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x              (io_ptw_0_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w              (io_ptw_0_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r              (io_ptw_0_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr               (io_ptw_0_pmp_1_addr),
    .io_ptw_pmp_1_mask               (io_ptw_0_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l              (io_ptw_0_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a              (io_ptw_0_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x              (io_ptw_0_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w              (io_ptw_0_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r              (io_ptw_0_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr               (io_ptw_0_pmp_2_addr),
    .io_ptw_pmp_2_mask               (io_ptw_0_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l              (io_ptw_0_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a              (io_ptw_0_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x              (io_ptw_0_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w              (io_ptw_0_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r              (io_ptw_0_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr               (io_ptw_0_pmp_3_addr),
    .io_ptw_pmp_3_mask               (io_ptw_0_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l              (io_ptw_0_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a              (io_ptw_0_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x              (io_ptw_0_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w              (io_ptw_0_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r              (io_ptw_0_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr               (io_ptw_0_pmp_4_addr),
    .io_ptw_pmp_4_mask               (io_ptw_0_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l              (io_ptw_0_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a              (io_ptw_0_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x              (io_ptw_0_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w              (io_ptw_0_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r              (io_ptw_0_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr               (io_ptw_0_pmp_5_addr),
    .io_ptw_pmp_5_mask               (io_ptw_0_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l              (io_ptw_0_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a              (io_ptw_0_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x              (io_ptw_0_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w              (io_ptw_0_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r              (io_ptw_0_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr               (io_ptw_0_pmp_6_addr),
    .io_ptw_pmp_6_mask               (io_ptw_0_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l              (io_ptw_0_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a              (io_ptw_0_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x              (io_ptw_0_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w              (io_ptw_0_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r              (io_ptw_0_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr               (io_ptw_0_pmp_7_addr),
    .io_ptw_pmp_7_mask               (io_ptw_0_pmp_7_mask),
    .io_exp_flush_retry              (io_exp_0_flush_retry),
    .io_exp_flush_skip               (io_exp_0_flush_skip),
    .io_resp_miss                    (_tlbs_0_io_resp_miss),
    .io_resp_paddr                   (_tlbs_0_io_resp_paddr),
    .io_ptw_req_valid                (io_ptw_0_req_valid),
    .io_ptw_req_bits_bits_addr       (io_ptw_0_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa   (io_ptw_0_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1    (io_ptw_0_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2     (io_ptw_0_req_bits_bits_stage2),
    .io_exp_interrupt                (io_exp_0_interrupt),
    .io_counter_event_signal_15      (io_counter_event_signal_15),
    .io_counter_event_signal_16      (io_counter_event_signal_16),
    .io_counter_event_signal_17      (io_counter_event_signal_17)
  );
  RRArbiter_4 tlbArbOpt (	// @[FrontendTLB.scala:107:50]
    .clock                      (clock),
    .io_in_0_valid              (tlbArbOpt_io_in_0_valid_REG),	// @[FrontendTLB.scala:130:27]
    .io_in_0_bits_tlb_req_vaddr (tlbArbOpt_io_in_0_bits_REG_tlb_req_vaddr),	// @[FrontendTLB.scala:131:22]
    .io_in_0_bits_status_debug  (tlbArbOpt_io_in_0_bits_REG_status_debug),	// @[FrontendTLB.scala:131:22]
    .io_in_0_bits_status_mxr    (tlbArbOpt_io_in_0_bits_REG_status_mxr),	// @[FrontendTLB.scala:131:22]
    .io_in_0_bits_status_sum    (tlbArbOpt_io_in_0_bits_REG_status_sum),	// @[FrontendTLB.scala:131:22]
    .io_in_1_valid              (tlbArbOpt_io_in_1_valid_REG),	// @[FrontendTLB.scala:130:27]
    .io_in_1_bits_tlb_req_vaddr (tlbArbOpt_io_in_1_bits_REG_tlb_req_vaddr),	// @[FrontendTLB.scala:131:22]
    .io_in_1_bits_status_debug  (tlbArbOpt_io_in_1_bits_REG_status_debug),	// @[FrontendTLB.scala:131:22]
    .io_in_1_bits_status_mxr    (tlbArbOpt_io_in_1_bits_REG_status_mxr),	// @[FrontendTLB.scala:131:22]
    .io_in_1_bits_status_sum    (tlbArbOpt_io_in_1_bits_REG_status_sum),	// @[FrontendTLB.scala:131:22]
    .io_in_0_ready              (_tlbArbOpt_io_in_0_ready),
    .io_in_1_ready              (_tlbArbOpt_io_in_1_ready),
    .io_out_valid               (_tlbArbOpt_io_out_valid),
    .io_out_bits_tlb_req_vaddr  (_tlbArbOpt_io_out_bits_tlb_req_vaddr),
    .io_out_bits_tlb_req_cmd    (_tlbArbOpt_io_out_bits_tlb_req_cmd),
    .io_out_bits_status_debug   (_tlbArbOpt_io_out_bits_status_debug),
    .io_out_bits_status_mxr     (_tlbArbOpt_io_out_bits_status_mxr),
    .io_out_bits_status_sum     (_tlbArbOpt_io_out_bits_status_sum)
  );
  assign io_clients_0_resp_miss = tlbReqFire ? _tlbs_0_io_resp_miss : ~io_clients_0_resp_miss_REG;	// @[Decoupled.scala:51:35, FrontendTLB.scala:102:39, :143:23, :144:19, :148:{24,27,35}]
  assign io_clients_0_resp_paddr = tlbReqFire ? _tlbs_0_io_resp_paddr : io_clients_0_resp_paddr_REG;	// @[Decoupled.scala:51:35, FrontendTLB.scala:102:39, :143:23, :144:19, :147:{25,35}]
  assign io_clients_1_resp_miss = tlbReqFire_1 ? _tlbs_0_io_resp_miss : ~io_clients_1_resp_miss_REG;	// @[Decoupled.scala:51:35, FrontendTLB.scala:102:39, :143:23, :144:19, :148:{24,27,35}]
  assign io_clients_1_resp_paddr = tlbReqFire_1 ? _tlbs_0_io_resp_paddr : io_clients_1_resp_paddr_REG;	// @[Decoupled.scala:51:35, FrontendTLB.scala:102:39, :143:23, :144:19, :147:{25,35}]
endmodule

