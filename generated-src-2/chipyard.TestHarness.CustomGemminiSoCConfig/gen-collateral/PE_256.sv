// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module PE_256(
  input         clock,
  input  [7:0]  io_in_a,
  input  [19:0] io_in_b,
                io_in_d,
  input         io_in_control_dataflow,
                io_in_control_propagate,
  input  [4:0]  io_in_control_shift,
  input  [2:0]  io_in_id,
  input         io_in_last,
                io_in_valid,
  output [7:0]  io_out_a,
  output [19:0] io_out_b,
                io_out_c,
  output        io_out_control_dataflow,
                io_out_control_propagate,
  output [4:0]  io_out_control_shift,
  output [2:0]  io_out_id,
  output        io_out_last,
                io_out_valid,
                io_bad_dataflow
);

  wire [19:0] _mac_unit_io_out_d;	// @[PE.scala:64:24]
  reg  [31:0] c1;	// @[PE.scala:69:15]
  reg  [31:0] c2;	// @[PE.scala:70:15]
  reg         last_s;	// @[Reg.scala:19:16]
  wire [4:0]  shift_offset = last_s != io_in_control_propagate ? io_in_control_shift : 5'h0;	// @[PE.scala:89:21, :90:25, Reg.scala:19:16]
  wire [31:0] _GEN = {27'h0, shift_offset - 5'h1};	// @[Arithmetic.scala:101:{50,53}, PE.scala:90:25]
  wire [31:0] _io_out_c_point_five_T_3 = $signed($signed(c1) >>> _GEN);	// @[Arithmetic.scala:101:50, PE.scala:69:15]
  wire [31:0] _GEN_0 = {27'h0, shift_offset};	// @[Arithmetic.scala:101:50, :103:30, PE.scala:90:25]
  wire [31:0] _io_out_c_T = $signed($signed(c1) >>> _GEN_0);	// @[Arithmetic.scala:103:30, PE.scala:69:15]
  wire [31:0] _io_out_c_T_3 = _io_out_c_T + {31'h0, (|shift_offset) & _io_out_c_point_five_T_3[0] & ((|(shift_offset < 5'h2 ? 32'h0 : c1 & (32'h1 << _GEN) - 32'h1)) | _io_out_c_T[0])};	// @[Arithmetic.scala:101:{32,50}, :102:{24,27,52,60,81,89}, :103:30, :105:{29,38}, :107:28, PE.scala:69:15, :90:25]
  wire [31:0] _GEN_1 = {27'h0, shift_offset - 5'h1};	// @[Arithmetic.scala:101:{50,53}, PE.scala:90:25]
  wire [31:0] _io_out_c_point_five_T_8 = $signed($signed(c2) >>> _GEN_1);	// @[Arithmetic.scala:101:50, PE.scala:70:15]
  wire [31:0] _io_out_c_T_11 = $signed($signed(c2) >>> _GEN_0);	// @[Arithmetic.scala:103:30, PE.scala:70:15]
  wire [31:0] _io_out_c_T_14 = _io_out_c_T_11 + {31'h0, (|shift_offset) & _io_out_c_point_five_T_8[0] & ((|(shift_offset < 5'h2 ? 32'h0 : c2 & (32'h1 << _GEN_1) - 32'h1)) | _io_out_c_T_11[0])};	// @[Arithmetic.scala:101:{32,50}, :102:{24,27,52,60,81,89}, :103:30, :105:{29,38}, :107:28, PE.scala:70:15, :90:25]
  wire [31:0] _GEN_2 = {{12{io_in_d[19]}}, io_in_d};	// @[PE.scala:123:10]
  wire [31:0] _GEN_3 = {{12{_mac_unit_io_out_d[19]}}, _mac_unit_io_out_d};	// @[PE.scala:64:24, :107:10]
  always @(posedge clock) begin
    if (io_in_valid) begin
      if (io_in_control_dataflow) begin
        if (io_in_control_dataflow & io_in_control_propagate)	// @[PE.scala:69:15, :117:101, :118:30, :123:10]
          c1 <= _GEN_2;	// @[PE.scala:69:15, :123:10]
        if (~io_in_control_dataflow | io_in_control_propagate) begin	// @[PE.scala:70:15, :117:101, :118:30]
        end
        else	// @[PE.scala:70:15, :117:101, :118:30]
          c2 <= _GEN_2;	// @[PE.scala:70:15, :123:10]
      end
      else if (io_in_control_propagate) begin
        c1 <= {{12{io_in_d[19]}}, io_in_d};	// @[Arithmetic.scala:117:26, Cat.scala:33:92, PE.scala:69:15]
        c2 <= _GEN_3;	// @[PE.scala:70:15, :107:10]
      end
      else begin
        c1 <= _GEN_3;	// @[PE.scala:69:15, :107:10]
        c2 <= {{12{io_in_d[19]}}, io_in_d};	// @[Arithmetic.scala:117:26, Cat.scala:33:92, PE.scala:70:15]
      end
      last_s <= io_in_control_propagate;	// @[Reg.scala:19:16]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        c1 = _RANDOM_0;	// @[PE.scala:69:15]
        c2 = _RANDOM_1;	// @[PE.scala:70:15]
        last_s = _RANDOM_2[0];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  MacUnit mac_unit (	// @[PE.scala:64:24]
    .io_in_a  (io_in_a),
    .io_in_b  (io_in_control_dataflow ? (io_in_control_propagate ? c2[7:0] : c1[7:0]) : io_in_b[7:0]),	// @[PE.scala:69:15, :70:15, :101:95, :102:30, :105:37, :117:101, :118:30, :120:{24,38}, :126:{24,38}]
    .io_in_c  (io_in_control_dataflow ? {{12{io_in_b[19]}}, io_in_b} : io_in_control_propagate ? c2 : c1),	// @[PE.scala:69:15, :70:15, :101:95, :102:30, :106:24, :113:24, :117:101, :121:24]
    .io_out_d (_mac_unit_io_out_d)
  );
  assign io_out_a = io_in_a;
  assign io_out_b = io_in_control_dataflow ? _mac_unit_io_out_d : io_in_b;	// @[PE.scala:64:24, :101:95, :102:30, :117:101]
  assign io_out_c = io_in_control_dataflow ? (io_in_control_propagate ? c1[19:0] : c2[19:0]) : io_in_control_propagate ? ($signed(_io_out_c_T_3) > 32'sh7FFFF ? 20'h7FFFF : $signed(_io_out_c_T_3) < -32'sh80000 ? 20'h80000 : _io_out_c_T_3[19:0]) : $signed(_io_out_c_T_14) > 32'sh7FFFF ? 20'h7FFFF : $signed(_io_out_c_T_14) < -32'sh80000 ? 20'h80000 : _io_out_c_T_14[19:0];	// @[Arithmetic.scala:107:28, :125:{33,60}, Mux.scala:101:16, PE.scala:69:15, :70:15, :101:95, :102:30, :103:16, :110:16, :117:101, :118:30, :119:16, :125:16]
  assign io_out_control_dataflow = io_in_control_dataflow;
  assign io_out_control_propagate = io_in_control_propagate;
  assign io_out_control_shift = io_in_control_shift;
  assign io_out_id = io_in_id;
  assign io_out_last = io_in_last;
  assign io_out_valid = io_in_valid;
  assign io_bad_dataflow = 1'h0;	// @[PE.scala:69:15]
endmodule

