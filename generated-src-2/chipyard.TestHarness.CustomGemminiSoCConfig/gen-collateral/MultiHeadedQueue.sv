// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module MultiHeadedQueue(
  input         clock,
                reset,
                io_enq_valid,
  input  [6:0]  io_enq_bits_cmd_inst_funct,
  input  [63:0] io_enq_bits_cmd_rs1,
                io_enq_bits_cmd_rs2,
  input  [5:0]  io_enq_bits_rob_id_bits,
  input         io_deq_pop,
  output        io_enq_ready,
                io_deq_valid_0,
                io_deq_valid_1,
  output [6:0]  io_deq_bits_0_cmd_inst_funct,
  output [63:0] io_deq_bits_0_cmd_rs1,
                io_deq_bits_0_cmd_rs2,
  output        io_deq_bits_0_rob_id_valid,
  output [5:0]  io_deq_bits_0_rob_id_bits,
  output [6:0]  io_deq_bits_1_cmd_inst_funct,
  output [63:0] io_deq_bits_1_cmd_rs1,
                io_deq_bits_1_cmd_rs2,
  output [5:0]  io_deq_bits_1_rob_id_bits
);

  reg  [6:0]  regs_0_cmd_inst_funct;	// @[MultiHeadedQueue.scala:22:17]
  reg  [63:0] regs_0_cmd_rs1;	// @[MultiHeadedQueue.scala:22:17]
  reg  [63:0] regs_0_cmd_rs2;	// @[MultiHeadedQueue.scala:22:17]
  reg         regs_0_rob_id_valid;	// @[MultiHeadedQueue.scala:22:17]
  reg  [5:0]  regs_0_rob_id_bits;	// @[MultiHeadedQueue.scala:22:17]
  reg  [6:0]  regs_1_cmd_inst_funct;	// @[MultiHeadedQueue.scala:22:17]
  reg  [63:0] regs_1_cmd_rs1;	// @[MultiHeadedQueue.scala:22:17]
  reg  [63:0] regs_1_cmd_rs2;	// @[MultiHeadedQueue.scala:22:17]
  reg         regs_1_rob_id_valid;	// @[MultiHeadedQueue.scala:22:17]
  reg  [5:0]  regs_1_rob_id_bits;	// @[MultiHeadedQueue.scala:22:17]
  reg         raddr;	// @[MultiHeadedQueue.scala:23:22]
  reg         waddr;	// @[MultiHeadedQueue.scala:24:22]
  reg  [1:0]  len;	// @[MultiHeadedQueue.scala:25:20]
  wire        _io_deq_bits_1_T_12 = 1'h1 - raddr;	// @[MultiHeadedQueue.scala:23:22, Util.scala:13:57]
  wire        _io_deq_bits_1_T_19 = raddr ? 1'h1 - _io_deq_bits_1_T_12 - 1'h1 : raddr - 1'h1;	// @[MultiHeadedQueue.scala:23:22, Util.scala:13:{10,48,57,62,71}]
  wire [1:0]  _GEN = {1'h0, io_deq_pop};	// @[MultiHeadedQueue.scala:22:17, Util.scala:13:22]
  wire        _len_T_4 = ~(len[1]) & io_enq_valid;	// @[Decoupled.scala:51:35, MultiHeadedQueue.scala:25:20, :27:23]
  wire        _GEN_0 = _len_T_4 & ~waddr;	// @[Decoupled.scala:51:35, MultiHeadedQueue.scala:22:17, :24:22, :36:22, :37:17]
  wire        _GEN_1 = _len_T_4 & waddr;	// @[Decoupled.scala:51:35, MultiHeadedQueue.scala:22:17, :24:22, :36:22, :37:17]
  always @(posedge clock) begin
    if (_GEN_0) begin	// @[MultiHeadedQueue.scala:22:17, :36:22, :37:17]
      regs_0_cmd_inst_funct <= io_enq_bits_cmd_inst_funct;	// @[MultiHeadedQueue.scala:22:17]
      regs_0_cmd_rs1 <= io_enq_bits_cmd_rs1;	// @[MultiHeadedQueue.scala:22:17]
      regs_0_cmd_rs2 <= io_enq_bits_cmd_rs2;	// @[MultiHeadedQueue.scala:22:17]
      regs_0_rob_id_bits <= io_enq_bits_rob_id_bits;	// @[MultiHeadedQueue.scala:22:17]
    end
    regs_0_rob_id_valid <= _GEN_0 | regs_0_rob_id_valid;	// @[MultiHeadedQueue.scala:22:17, :36:22, :37:17]
    if (_GEN_1) begin	// @[MultiHeadedQueue.scala:22:17, :36:22, :37:17]
      regs_1_cmd_inst_funct <= io_enq_bits_cmd_inst_funct;	// @[MultiHeadedQueue.scala:22:17]
      regs_1_cmd_rs1 <= io_enq_bits_cmd_rs1;	// @[MultiHeadedQueue.scala:22:17]
      regs_1_cmd_rs2 <= io_enq_bits_cmd_rs2;	// @[MultiHeadedQueue.scala:22:17]
      regs_1_rob_id_bits <= io_enq_bits_rob_id_bits;	// @[MultiHeadedQueue.scala:22:17]
    end
    regs_1_rob_id_valid <= _GEN_1 | regs_1_rob_id_valid;	// @[MultiHeadedQueue.scala:22:17, :36:22, :37:17]
    if (reset) begin
      raddr <= 1'h0;	// @[MultiHeadedQueue.scala:22:17, :23:22]
      waddr <= 1'h0;	// @[MultiHeadedQueue.scala:22:17, :24:22]
      len <= 2'h0;	// @[MultiHeadedQueue.scala:25:20]
    end
    else begin
      if (io_deq_pop) begin
        if (raddr >= 1'h1 - io_deq_pop - 1'h1 & io_deq_pop)	// @[MultiHeadedQueue.scala:23:22, Util.scala:13:{13,22,26,32}]
          raddr <= io_deq_pop - _io_deq_bits_1_T_12 - 1'h1;	// @[MultiHeadedQueue.scala:23:22, Util.scala:13:{48,57,62}]
        else	// @[Util.scala:13:32]
          raddr <= raddr + io_deq_pop;	// @[MultiHeadedQueue.scala:23:22, Util.scala:13:71]
        len <= len - _GEN + {1'h0, _len_T_4};	// @[Decoupled.scala:51:35, MultiHeadedQueue.scala:22:17, :25:20, :45:{16,29}, Util.scala:13:22]
      end
      else if (_len_T_4)	// @[Decoupled.scala:51:35]
        len <= len + 2'h1;	// @[MultiHeadedQueue.scala:25:20, :39:16, Util.scala:13:57]
      if (_len_T_4) begin	// @[Decoupled.scala:51:35]
        if (waddr)	// @[MultiHeadedQueue.scala:24:22]
          waddr <= 1'h1 - (1'h1 - waddr) - 1'h1;	// @[MultiHeadedQueue.scala:24:22, Util.scala:13:{48,57,62}]
        else	// @[MultiHeadedQueue.scala:24:22]
          waddr <= waddr - 1'h1;	// @[MultiHeadedQueue.scala:24:22, Util.scala:13:71]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[MultiHeadedQueue.scala:48:9]
      if (~reset & _GEN > len) begin	// @[MultiHeadedQueue.scala:25:20, :48:{9,21}, Util.scala:13:22]
        if (`ASSERT_VERBOSE_COND_)	// @[MultiHeadedQueue.scala:48:9]
          $error("Assertion failed\n    at MultiHeadedQueue.scala:48 assert(io.deq.pop <= len && io.deq.pop <= heads.U && io.deq.pop <= maxpop.U)\n");	// @[MultiHeadedQueue.scala:48:9]
        if (`STOP_COND_)	// @[MultiHeadedQueue.scala:48:9]
          $fatal;	// @[MultiHeadedQueue.scala:48:9]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        regs_0_cmd_inst_funct = _RANDOM_0[6:0];	// @[MultiHeadedQueue.scala:22:17]
        regs_0_cmd_rs1 = {_RANDOM_1, _RANDOM_2};	// @[MultiHeadedQueue.scala:22:17]
        regs_0_cmd_rs2 = {_RANDOM_3, _RANDOM_4};	// @[MultiHeadedQueue.scala:22:17]
        regs_0_rob_id_valid = _RANDOM_8[9];	// @[MultiHeadedQueue.scala:22:17]
        regs_0_rob_id_bits = _RANDOM_8[15:10];	// @[MultiHeadedQueue.scala:22:17]
        regs_1_cmd_inst_funct = _RANDOM_8[24:18];	// @[MultiHeadedQueue.scala:22:17]
        regs_1_cmd_rs1 = {_RANDOM_9[31:18], _RANDOM_10, _RANDOM_11[17:0]};	// @[MultiHeadedQueue.scala:22:17]
        regs_1_cmd_rs2 = {_RANDOM_11[31:18], _RANDOM_12, _RANDOM_13[17:0]};	// @[MultiHeadedQueue.scala:22:17]
        regs_1_rob_id_valid = _RANDOM_16[27];	// @[MultiHeadedQueue.scala:22:17]
        regs_1_rob_id_bits = {_RANDOM_16[31:28], _RANDOM_17[1:0]};	// @[MultiHeadedQueue.scala:22:17]
        raddr = _RANDOM_17[4];	// @[MultiHeadedQueue.scala:22:17, :23:22]
        waddr = _RANDOM_17[5];	// @[MultiHeadedQueue.scala:22:17, :24:22]
        len = _RANDOM_17[7:6];	// @[MultiHeadedQueue.scala:22:17, :25:20]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_enq_ready = ~(len[1]);	// @[MultiHeadedQueue.scala:25:20, :27:23]
  assign io_deq_valid_0 = |len;	// @[MultiHeadedQueue.scala:25:20, :31:28]
  assign io_deq_valid_1 = len[1];	// @[MultiHeadedQueue.scala:25:20, :31:28]
  assign io_deq_bits_0_cmd_inst_funct = raddr ? regs_1_cmd_inst_funct : regs_0_cmd_inst_funct;	// @[MultiHeadedQueue.scala:22:17, :23:22, :32:20]
  assign io_deq_bits_0_cmd_rs1 = raddr ? regs_1_cmd_rs1 : regs_0_cmd_rs1;	// @[MultiHeadedQueue.scala:22:17, :23:22, :32:20]
  assign io_deq_bits_0_cmd_rs2 = raddr ? regs_1_cmd_rs2 : regs_0_cmd_rs2;	// @[MultiHeadedQueue.scala:22:17, :23:22, :32:20]
  assign io_deq_bits_0_rob_id_valid = raddr ? regs_1_rob_id_valid : regs_0_rob_id_valid;	// @[MultiHeadedQueue.scala:22:17, :23:22, :32:20]
  assign io_deq_bits_0_rob_id_bits = raddr ? regs_1_rob_id_bits : regs_0_rob_id_bits;	// @[MultiHeadedQueue.scala:22:17, :23:22, :32:20]
  assign io_deq_bits_1_cmd_inst_funct = _io_deq_bits_1_T_19 ? regs_1_cmd_inst_funct : regs_0_cmd_inst_funct;	// @[MultiHeadedQueue.scala:22:17, :32:20, Util.scala:13:10]
  assign io_deq_bits_1_cmd_rs1 = _io_deq_bits_1_T_19 ? regs_1_cmd_rs1 : regs_0_cmd_rs1;	// @[MultiHeadedQueue.scala:22:17, :32:20, Util.scala:13:10]
  assign io_deq_bits_1_cmd_rs2 = _io_deq_bits_1_T_19 ? regs_1_cmd_rs2 : regs_0_cmd_rs2;	// @[MultiHeadedQueue.scala:22:17, :32:20, Util.scala:13:10]
  assign io_deq_bits_1_rob_id_bits = _io_deq_bits_1_T_19 ? regs_1_rob_id_bits : regs_0_rob_id_bits;	// @[MultiHeadedQueue.scala:22:17, :32:20, Util.scala:13:10]
endmodule

