// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module Queue_70(
  input          clock,
                 reset,
                 io_enq_valid,
  input  [2:0]   io_enq_bits_tl_a_opcode,
                 io_enq_bits_tl_a_param,
  input  [3:0]   io_enq_bits_tl_a_size,
                 io_enq_bits_tl_a_source,
  input  [31:0]  io_enq_bits_tl_a_address,
  input  [15:0]  io_enq_bits_tl_a_mask,
  input  [127:0] io_enq_bits_tl_a_data,
  input          io_enq_bits_tl_a_corrupt,
  input  [38:0]  io_enq_bits_vaddr,
  input          io_enq_bits_status_debug,
                 io_enq_bits_status_cease,
                 io_enq_bits_status_wfi,
  input  [31:0]  io_enq_bits_status_isa,
  input  [1:0]   io_enq_bits_status_dprv,
  input          io_enq_bits_status_dv,
  input  [1:0]   io_enq_bits_status_prv,
  input          io_enq_bits_status_v,
                 io_enq_bits_status_sd,
  input  [22:0]  io_enq_bits_status_zero2,
  input          io_enq_bits_status_mpv,
                 io_enq_bits_status_gva,
                 io_enq_bits_status_mbe,
                 io_enq_bits_status_sbe,
  input  [1:0]   io_enq_bits_status_sxl,
                 io_enq_bits_status_uxl,
  input          io_enq_bits_status_sd_rv32,
  input  [7:0]   io_enq_bits_status_zero1,
  input          io_enq_bits_status_tsr,
                 io_enq_bits_status_tw,
                 io_enq_bits_status_tvm,
                 io_enq_bits_status_mxr,
                 io_enq_bits_status_sum,
                 io_enq_bits_status_mprv,
  input  [1:0]   io_enq_bits_status_xs,
                 io_enq_bits_status_fs,
                 io_enq_bits_status_mpp,
                 io_enq_bits_status_vs,
  input          io_enq_bits_status_spp,
                 io_enq_bits_status_mpie,
                 io_enq_bits_status_ube,
                 io_enq_bits_status_spie,
                 io_enq_bits_status_upie,
                 io_enq_bits_status_mie,
                 io_enq_bits_status_hie,
                 io_enq_bits_status_sie,
                 io_enq_bits_status_uie,
                 io_deq_ready,
  output         io_deq_valid,
  output [2:0]   io_deq_bits_tl_a_opcode,
                 io_deq_bits_tl_a_param,
  output [3:0]   io_deq_bits_tl_a_size,
                 io_deq_bits_tl_a_source,
  output [31:0]  io_deq_bits_tl_a_address,
  output [15:0]  io_deq_bits_tl_a_mask,
  output [127:0] io_deq_bits_tl_a_data,
  output         io_deq_bits_tl_a_corrupt,
  output [38:0]  io_deq_bits_vaddr,
  output         io_deq_bits_status_debug,
                 io_deq_bits_status_cease,
                 io_deq_bits_status_wfi,
  output [31:0]  io_deq_bits_status_isa,
  output [1:0]   io_deq_bits_status_dprv,
  output         io_deq_bits_status_dv,
  output [1:0]   io_deq_bits_status_prv,
  output         io_deq_bits_status_v,
                 io_deq_bits_status_sd,
  output [22:0]  io_deq_bits_status_zero2,
  output         io_deq_bits_status_mpv,
                 io_deq_bits_status_gva,
                 io_deq_bits_status_mbe,
                 io_deq_bits_status_sbe,
  output [1:0]   io_deq_bits_status_sxl,
                 io_deq_bits_status_uxl,
  output         io_deq_bits_status_sd_rv32,
  output [7:0]   io_deq_bits_status_zero1,
  output         io_deq_bits_status_tsr,
                 io_deq_bits_status_tw,
                 io_deq_bits_status_tvm,
                 io_deq_bits_status_mxr,
                 io_deq_bits_status_sum,
                 io_deq_bits_status_mprv,
  output [1:0]   io_deq_bits_status_xs,
                 io_deq_bits_status_fs,
                 io_deq_bits_status_mpp,
                 io_deq_bits_status_vs,
  output         io_deq_bits_status_spp,
                 io_deq_bits_status_mpie,
                 io_deq_bits_status_ube,
                 io_deq_bits_status_spie,
                 io_deq_bits_status_upie,
                 io_deq_bits_status_mie,
                 io_deq_bits_status_hie,
                 io_deq_bits_status_sie,
                 io_deq_bits_status_uie
);

  wire         _io_enq_ready_T;	// @[Decoupled.scala:303:19]
  wire [334:0] _ram_ext_R0_data;	// @[Decoupled.scala:273:95]
  reg          maybe_full;	// @[Decoupled.scala:276:27]
  wire         do_enq = _io_enq_ready_T & io_enq_valid;	// @[Decoupled.scala:51:35, :303:19]
  assign _io_enq_ready_T = ~maybe_full;	// @[Decoupled.scala:276:27, :303:19]
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;	// @[Decoupled.scala:276:27]
    else if (do_enq != (io_deq_ready & maybe_full))	// @[Decoupled.scala:51:35, :276:27, :293:15]
      maybe_full <= do_enq;	// @[Decoupled.scala:51:35, :276:27]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        maybe_full = _RANDOM_0[0];	// @[Decoupled.scala:276:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ram_combMem_46 ram_ext (	// @[Decoupled.scala:273:95]
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),	// @[Decoupled.scala:51:35]
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_status_uie, io_enq_bits_status_sie, io_enq_bits_status_hie, io_enq_bits_status_mie, io_enq_bits_status_upie, io_enq_bits_status_spie, io_enq_bits_status_ube, io_enq_bits_status_mpie, io_enq_bits_status_spp, io_enq_bits_status_vs, io_enq_bits_status_mpp, io_enq_bits_status_fs, io_enq_bits_status_xs, io_enq_bits_status_mprv, io_enq_bits_status_sum, io_enq_bits_status_mxr, io_enq_bits_status_tvm, io_enq_bits_status_tw, io_enq_bits_status_tsr, io_enq_bits_status_zero1, io_enq_bits_status_sd_rv32, io_enq_bits_status_uxl, io_enq_bits_status_sxl, io_enq_bits_status_sbe, io_enq_bits_status_mbe, io_enq_bits_status_gva, io_enq_bits_status_mpv, io_enq_bits_status_zero2, io_enq_bits_status_sd, io_enq_bits_status_v, io_enq_bits_status_prv, io_enq_bits_status_dv, io_enq_bits_status_dprv, io_enq_bits_status_isa, io_enq_bits_status_wfi, io_enq_bits_status_cease, io_enq_bits_status_debug, io_enq_bits_vaddr, io_enq_bits_tl_a_corrupt, io_enq_bits_tl_a_data, io_enq_bits_tl_a_mask, io_enq_bits_tl_a_address, io_enq_bits_tl_a_source, io_enq_bits_tl_a_size, io_enq_bits_tl_a_param, io_enq_bits_tl_a_opcode}),	// @[Decoupled.scala:273:95]
    .R0_data (_ram_ext_R0_data)
  );
  assign io_deq_valid = maybe_full;	// @[Decoupled.scala:276:27]
  assign io_deq_bits_tl_a_opcode = _ram_ext_R0_data[2:0];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_tl_a_param = _ram_ext_R0_data[5:3];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_tl_a_size = _ram_ext_R0_data[9:6];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_tl_a_source = _ram_ext_R0_data[13:10];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_tl_a_address = _ram_ext_R0_data[45:14];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_tl_a_mask = _ram_ext_R0_data[61:46];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_tl_a_data = _ram_ext_R0_data[189:62];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_tl_a_corrupt = _ram_ext_R0_data[190];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_vaddr = _ram_ext_R0_data[229:191];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_debug = _ram_ext_R0_data[230];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_cease = _ram_ext_R0_data[231];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_wfi = _ram_ext_R0_data[232];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_isa = _ram_ext_R0_data[264:233];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_dprv = _ram_ext_R0_data[266:265];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_dv = _ram_ext_R0_data[267];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_prv = _ram_ext_R0_data[269:268];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_v = _ram_ext_R0_data[270];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sd = _ram_ext_R0_data[271];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_zero2 = _ram_ext_R0_data[294:272];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mpv = _ram_ext_R0_data[295];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_gva = _ram_ext_R0_data[296];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mbe = _ram_ext_R0_data[297];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sbe = _ram_ext_R0_data[298];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sxl = _ram_ext_R0_data[300:299];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_uxl = _ram_ext_R0_data[302:301];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sd_rv32 = _ram_ext_R0_data[303];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_zero1 = _ram_ext_R0_data[311:304];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_tsr = _ram_ext_R0_data[312];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_tw = _ram_ext_R0_data[313];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_tvm = _ram_ext_R0_data[314];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mxr = _ram_ext_R0_data[315];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sum = _ram_ext_R0_data[316];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mprv = _ram_ext_R0_data[317];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_xs = _ram_ext_R0_data[319:318];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_fs = _ram_ext_R0_data[321:320];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mpp = _ram_ext_R0_data[323:322];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_vs = _ram_ext_R0_data[325:324];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_spp = _ram_ext_R0_data[326];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mpie = _ram_ext_R0_data[327];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_ube = _ram_ext_R0_data[328];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_spie = _ram_ext_R0_data[329];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_upie = _ram_ext_R0_data[330];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mie = _ram_ext_R0_data[331];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_hie = _ram_ext_R0_data[332];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sie = _ram_ext_R0_data[333];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_uie = _ram_ext_R0_data[334];	// @[Decoupled.scala:273:95]
endmodule

