// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module RRArbiter(
  input         clock,
                io_in_0_valid,
  input  [7:0]  io_in_0_bits_data,
  input  [31:0] io_in_0_bits_scale_bits,
  input  [3:0]  io_in_0_bits_index,
  input         io_in_1_valid,
  input  [7:0]  io_in_1_bits_data,
  input  [31:0] io_in_1_bits_scale_bits,
  input  [3:0]  io_in_1_bits_index,
  input         io_in_2_valid,
  input  [7:0]  io_in_2_bits_data,
  input  [31:0] io_in_2_bits_scale_bits,
  input  [3:0]  io_in_2_bits_index,
  input         io_in_3_valid,
  input  [7:0]  io_in_3_bits_data,
  input  [31:0] io_in_3_bits_scale_bits,
  input  [3:0]  io_in_3_bits_index,
  input         io_in_4_valid,
  input  [7:0]  io_in_4_bits_data,
  input  [31:0] io_in_4_bits_scale_bits,
  input  [3:0]  io_in_4_bits_index,
  input         io_in_5_valid,
  input  [7:0]  io_in_5_bits_data,
  input  [31:0] io_in_5_bits_scale_bits,
  input  [3:0]  io_in_5_bits_index,
  input         io_in_6_valid,
  input  [7:0]  io_in_6_bits_data,
  input  [31:0] io_in_6_bits_scale_bits,
  input  [3:0]  io_in_6_bits_index,
  input         io_in_7_valid,
  input  [7:0]  io_in_7_bits_data,
  input  [31:0] io_in_7_bits_scale_bits,
  input  [3:0]  io_in_7_bits_index,
  input         io_in_8_valid,
  input  [7:0]  io_in_8_bits_data,
  input  [31:0] io_in_8_bits_scale_bits,
  input  [3:0]  io_in_8_bits_index,
  input         io_in_9_valid,
  input  [7:0]  io_in_9_bits_data,
  input  [31:0] io_in_9_bits_scale_bits,
  input  [3:0]  io_in_9_bits_index,
  input         io_in_10_valid,
  input  [7:0]  io_in_10_bits_data,
  input  [31:0] io_in_10_bits_scale_bits,
  input  [3:0]  io_in_10_bits_index,
  input         io_in_11_valid,
  input  [7:0]  io_in_11_bits_data,
  input  [31:0] io_in_11_bits_scale_bits,
  input  [3:0]  io_in_11_bits_index,
  output        io_in_0_ready,
                io_in_1_ready,
                io_in_2_ready,
                io_in_3_ready,
                io_in_4_ready,
                io_in_5_ready,
                io_in_6_ready,
                io_in_7_ready,
                io_in_8_ready,
                io_in_9_ready,
                io_in_10_ready,
                io_in_11_ready,
                io_out_valid,
  output [7:0]  io_out_bits_data,
  output [31:0] io_out_bits_scale_bits,
  output [1:0]  io_out_bits_id,
  output [3:0]  io_out_bits_index
);

  wire [3:0]        choice;	// @[Arbiter.scala:93:{24,33}]
  wire [15:0][1:0]  _GEN = '{2'h0, 2'h0, 2'h0, 2'h0, 2'h2, 2'h2, 2'h2, 2'h2, 2'h1, 2'h1, 2'h1, 2'h1, 2'h0, 2'h0, 2'h0, 2'h0};	// @[Arbiter.scala:55:16]
  wire [15:0]       _GEN_0 = {{io_in_0_valid}, {io_in_0_valid}, {io_in_0_valid}, {io_in_0_valid}, {io_in_11_valid}, {io_in_10_valid}, {io_in_9_valid}, {io_in_8_valid}, {io_in_7_valid}, {io_in_6_valid}, {io_in_5_valid}, {io_in_4_valid}, {io_in_3_valid}, {io_in_2_valid}, {io_in_1_valid}, {io_in_0_valid}};	// @[Arbiter.scala:55:16]
  wire              _io_out_valid_output = _GEN_0[choice];	// @[Arbiter.scala:55:16, :93:{24,33}]
  wire [15:0][7:0]  _GEN_1 = {{io_in_0_bits_data}, {io_in_0_bits_data}, {io_in_0_bits_data}, {io_in_0_bits_data}, {io_in_11_bits_data}, {io_in_10_bits_data}, {io_in_9_bits_data}, {io_in_8_bits_data}, {io_in_7_bits_data}, {io_in_6_bits_data}, {io_in_5_bits_data}, {io_in_4_bits_data}, {io_in_3_bits_data}, {io_in_2_bits_data}, {io_in_1_bits_data}, {io_in_0_bits_data}};	// @[Arbiter.scala:55:16]
  wire [15:0][31:0] _GEN_2 = {{io_in_0_bits_scale_bits}, {io_in_0_bits_scale_bits}, {io_in_0_bits_scale_bits}, {io_in_0_bits_scale_bits}, {io_in_11_bits_scale_bits}, {io_in_10_bits_scale_bits}, {io_in_9_bits_scale_bits}, {io_in_8_bits_scale_bits}, {io_in_7_bits_scale_bits}, {io_in_6_bits_scale_bits}, {io_in_5_bits_scale_bits}, {io_in_4_bits_scale_bits}, {io_in_3_bits_scale_bits}, {io_in_2_bits_scale_bits}, {io_in_1_bits_scale_bits}, {io_in_0_bits_scale_bits}};	// @[Arbiter.scala:55:16]
  wire [15:0][3:0]  _GEN_3 = {{io_in_0_bits_index}, {io_in_0_bits_index}, {io_in_0_bits_index}, {io_in_0_bits_index}, {io_in_11_bits_index}, {io_in_10_bits_index}, {io_in_9_bits_index}, {io_in_8_bits_index}, {io_in_7_bits_index}, {io_in_6_bits_index}, {io_in_5_bits_index}, {io_in_4_bits_index}, {io_in_3_bits_index}, {io_in_2_bits_index}, {io_in_1_bits_index}, {io_in_0_bits_index}};	// @[Arbiter.scala:55:16]
  reg  [3:0]        lastGrant;	// @[Reg.scala:19:16]
  wire              grantMask_1 = lastGrant == 4'h0;	// @[Arbiter.scala:81:49, :91:{26,35}, Reg.scala:19:16]
  wire              grantMask_2 = lastGrant < 4'h2;	// @[Arbiter.scala:81:49, :91:{26,35}, Reg.scala:19:16]
  wire              grantMask_3 = lastGrant < 4'h3;	// @[Arbiter.scala:81:49, :91:{26,35}, Reg.scala:19:16]
  wire              grantMask_4 = lastGrant < 4'h4;	// @[Arbiter.scala:81:49, :91:{26,35}, Reg.scala:19:16]
  wire              grantMask_5 = lastGrant < 4'h5;	// @[Arbiter.scala:81:49, :91:{26,35}, Reg.scala:19:16]
  wire              grantMask_6 = lastGrant < 4'h6;	// @[Arbiter.scala:81:49, :91:{26,35}, Reg.scala:19:16]
  wire              grantMask_7 = lastGrant < 4'h7;	// @[Arbiter.scala:81:49, :91:{26,35}, Reg.scala:19:16]
  wire              grantMask_9 = lastGrant < 4'h9;	// @[Arbiter.scala:81:49, Reg.scala:19:16]
  wire              grantMask_10 = lastGrant < 4'hA;	// @[Arbiter.scala:81:49, Reg.scala:19:16]
  wire              grantMask_11 = lastGrant < 4'hB;	// @[Arbiter.scala:81:49, :89:41, Reg.scala:19:16]
  wire              validMask_1 = io_in_1_valid & grantMask_1;	// @[Arbiter.scala:81:49, :82:76]
  wire              validMask_2 = io_in_2_valid & grantMask_2;	// @[Arbiter.scala:81:49, :82:76]
  wire              validMask_3 = io_in_3_valid & grantMask_3;	// @[Arbiter.scala:81:49, :82:76]
  wire              validMask_4 = io_in_4_valid & grantMask_4;	// @[Arbiter.scala:81:49, :82:76]
  wire              validMask_5 = io_in_5_valid & grantMask_5;	// @[Arbiter.scala:81:49, :82:76]
  wire              validMask_6 = io_in_6_valid & grantMask_6;	// @[Arbiter.scala:81:49, :82:76]
  wire              validMask_7 = io_in_7_valid & grantMask_7;	// @[Arbiter.scala:81:49, :82:76]
  wire              validMask_8 = io_in_8_valid & ~(lastGrant[3]);	// @[Arbiter.scala:81:49, :82:76, Reg.scala:19:16]
  wire              validMask_9 = io_in_9_valid & grantMask_9;	// @[Arbiter.scala:81:49, :82:76]
  wire              validMask_10 = io_in_10_valid & grantMask_10;	// @[Arbiter.scala:81:49, :82:76]
  wire              validMask_11 = io_in_11_valid & grantMask_11;	// @[Arbiter.scala:81:49, :82:76]
  wire              _ctrl_T_1 = validMask_1 | validMask_2;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_2 = _ctrl_T_1 | validMask_3;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_3 = _ctrl_T_2 | validMask_4;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_4 = _ctrl_T_3 | validMask_5;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_5 = _ctrl_T_4 | validMask_6;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_6 = _ctrl_T_5 | validMask_7;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_7 = _ctrl_T_6 | validMask_8;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_8 = _ctrl_T_7 | validMask_9;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_9 = _ctrl_T_8 | validMask_10;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_10 = _ctrl_T_9 | validMask_11;	// @[Arbiter.scala:45:68, :82:76]
  wire              _ctrl_T_11 = _ctrl_T_10 | io_in_0_valid;	// @[Arbiter.scala:45:68]
  wire              _ctrl_T_12 = _ctrl_T_11 | io_in_1_valid;	// @[Arbiter.scala:45:68]
  wire              _ctrl_T_13 = _ctrl_T_12 | io_in_2_valid;	// @[Arbiter.scala:45:68]
  wire              _ctrl_T_14 = _ctrl_T_13 | io_in_3_valid;	// @[Arbiter.scala:45:68]
  wire              _ctrl_T_15 = _ctrl_T_14 | io_in_4_valid;	// @[Arbiter.scala:45:68]
  wire              _ctrl_T_16 = _ctrl_T_15 | io_in_5_valid;	// @[Arbiter.scala:45:68]
  wire              _ctrl_T_17 = _ctrl_T_16 | io_in_6_valid;	// @[Arbiter.scala:45:68]
  wire              _ctrl_T_18 = _ctrl_T_17 | io_in_7_valid;	// @[Arbiter.scala:45:68]
  wire              _ctrl_T_19 = _ctrl_T_18 | io_in_8_valid;	// @[Arbiter.scala:45:68]
  wire              _ctrl_T_20 = _ctrl_T_19 | io_in_9_valid;	// @[Arbiter.scala:45:68]
  wire [3:0]        _GEN_4 = {3'h5, ~io_in_10_valid};	// @[Arbiter.scala:89:41, :91:{26,35}]
  assign choice = validMask_1 ? 4'h1 : validMask_2 ? 4'h2 : validMask_3 ? 4'h3 : validMask_4 ? 4'h4 : validMask_5 ? 4'h5 : validMask_6 ? 4'h6 : validMask_7 ? 4'h7 : validMask_8 ? 4'h8 : validMask_9 ? 4'h9 : validMask_10 ? 4'hA : validMask_11 ? 4'hB : io_in_0_valid ? 4'h0 : io_in_1_valid ? 4'h1 : io_in_2_valid ? 4'h2 : io_in_3_valid ? 4'h3 : io_in_4_valid ? 4'h4 : io_in_5_valid ? 4'h5 : io_in_6_valid ? 4'h6 : io_in_7_valid ? 4'h7 : io_in_8_valid ? 4'h8 : io_in_9_valid ? 4'h9 : _GEN_4;	// @[Arbiter.scala:81:49, :82:76, :89:41, :91:{26,35}, :93:{24,33}]
  always @(posedge clock) begin
    if (_io_out_valid_output) begin	// @[Arbiter.scala:55:16]
      if (validMask_1)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'h1;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (validMask_2)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'h2;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (validMask_3)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'h3;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (validMask_4)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'h4;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (validMask_5)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'h5;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (validMask_6)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'h6;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (validMask_7)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'h7;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (validMask_8)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'h8;	// @[Arbiter.scala:81:49, Reg.scala:19:16]
      else if (validMask_9)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'h9;	// @[Arbiter.scala:81:49, Reg.scala:19:16]
      else if (validMask_10)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'hA;	// @[Arbiter.scala:81:49, Reg.scala:19:16]
      else if (validMask_11)	// @[Arbiter.scala:82:76]
        lastGrant <= 4'hB;	// @[Arbiter.scala:89:41, Reg.scala:19:16]
      else if (io_in_0_valid)
        lastGrant <= 4'h0;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (io_in_1_valid)
        lastGrant <= 4'h1;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (io_in_2_valid)
        lastGrant <= 4'h2;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (io_in_3_valid)
        lastGrant <= 4'h3;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (io_in_4_valid)
        lastGrant <= 4'h4;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (io_in_5_valid)
        lastGrant <= 4'h5;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (io_in_6_valid)
        lastGrant <= 4'h6;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (io_in_7_valid)
        lastGrant <= 4'h7;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (io_in_8_valid)
        lastGrant <= 4'h8;	// @[Arbiter.scala:81:49, Reg.scala:19:16]
      else if (io_in_9_valid)
        lastGrant <= 4'h9;	// @[Arbiter.scala:81:49, Reg.scala:19:16]
      else
        lastGrant <= _GEN_4;	// @[Arbiter.scala:89:41, :91:{26,35}, Reg.scala:19:16]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        lastGrant = _RANDOM_0[3:0];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_in_0_ready = ~_ctrl_T_10;	// @[Arbiter.scala:45:{68,78}]
  assign io_in_1_ready = grantMask_1 | ~_ctrl_T_11;	// @[Arbiter.scala:45:{68,78}, :81:49, :86:50]
  assign io_in_2_ready = ~validMask_1 & grantMask_2 | ~_ctrl_T_12;	// @[Arbiter.scala:45:{68,78}, :81:49, :82:76, :86:{34,50}]
  assign io_in_3_ready = ~_ctrl_T_1 & grantMask_3 | ~_ctrl_T_13;	// @[Arbiter.scala:45:{68,78}, :81:49, :86:{34,50}]
  assign io_in_4_ready = ~_ctrl_T_2 & grantMask_4 | ~_ctrl_T_14;	// @[Arbiter.scala:45:{68,78}, :81:49, :86:{34,50}]
  assign io_in_5_ready = ~_ctrl_T_3 & grantMask_5 | ~_ctrl_T_15;	// @[Arbiter.scala:45:{68,78}, :81:49, :86:{34,50}]
  assign io_in_6_ready = ~_ctrl_T_4 & grantMask_6 | ~_ctrl_T_16;	// @[Arbiter.scala:45:{68,78}, :81:49, :86:{34,50}]
  assign io_in_7_ready = ~_ctrl_T_5 & grantMask_7 | ~_ctrl_T_17;	// @[Arbiter.scala:45:{68,78}, :81:49, :86:{34,50}]
  assign io_in_8_ready = ~_ctrl_T_6 & ~(lastGrant[3]) | ~_ctrl_T_18;	// @[Arbiter.scala:45:{68,78}, :81:49, :86:{34,50}, Reg.scala:19:16]
  assign io_in_9_ready = ~_ctrl_T_7 & grantMask_9 | ~_ctrl_T_19;	// @[Arbiter.scala:45:{68,78}, :81:49, :86:{34,50}]
  assign io_in_10_ready = ~_ctrl_T_8 & grantMask_10 | ~_ctrl_T_20;	// @[Arbiter.scala:45:{68,78}, :81:49, :86:{34,50}]
  assign io_in_11_ready = ~_ctrl_T_9 & grantMask_11 | ~(_ctrl_T_20 | io_in_10_valid);	// @[Arbiter.scala:45:{68,78}, :81:49, :86:{34,50}]
  assign io_out_valid = _io_out_valid_output;	// @[Arbiter.scala:55:16]
  assign io_out_bits_data = _GEN_1[choice];	// @[Arbiter.scala:55:16, :93:{24,33}]
  assign io_out_bits_scale_bits = _GEN_2[choice];	// @[Arbiter.scala:55:16, :93:{24,33}]
  assign io_out_bits_id = _GEN[choice];	// @[Arbiter.scala:55:16, :93:{24,33}]
  assign io_out_bits_index = _GEN_3[choice];	// @[Arbiter.scala:55:16, :93:{24,33}]
endmodule

