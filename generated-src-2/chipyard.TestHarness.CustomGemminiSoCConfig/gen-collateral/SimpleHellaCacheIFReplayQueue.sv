// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SimpleHellaCacheIFReplayQueue(
  input         clock,
                reset,
                io_nack_valid,
  input  [5:0]  io_nack_bits,
  input         io_resp_valid,
  input  [7:0]  io_resp_bits_tag,
  input         io_replay_ready,
  output        io_replay_valid,
  output [39:0] io_replay_bits_addr,
  output [7:0]  io_replay_bits_tag,
  output [4:0]  io_replay_bits_cmd,
  output [1:0]  io_replay_bits_size,
  output        io_replay_bits_signed,
  output [1:0]  io_replay_bits_dprv,
  output        io_replay_bits_dv,
                io_replay_bits_phys,
                io_replay_bits_no_alloc,
                io_replay_bits_no_xcpt,
  output [63:0] io_replay_bits_data,
  output [7:0]  io_replay_bits_mask
);

  wire _nackq_io_enq_ready;	// @[SimpleHellaCacheIF.scala:44:21]
  wire _nackq_io_deq_valid;	// @[SimpleHellaCacheIF.scala:44:21]
  wire _nackq_io_deq_bits;	// @[SimpleHellaCacheIF.scala:44:21]
  reg  replaying;	// @[SimpleHellaCacheIF.scala:45:26]
  wire _io_replay_valid_output = _nackq_io_deq_valid & ~replaying;	// @[SimpleHellaCacheIF.scala:44:21, :45:26, :55:{41,44}]
  wire replay_complete = io_resp_valid & replaying & io_resp_bits_tag == 8'h0;	// @[SimpleHellaCacheIF.scala:35:17, :45:26, :65:{52,72}]
  wire nack_head = io_nack_valid & _nackq_io_deq_valid & io_nack_bits == 6'h0;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :66:{55,71}]
  wire _nackq_io_enq_valid_T_1 = io_nack_valid & ~nack_head;	// @[SimpleHellaCacheIF.scala:66:55, :70:{39,42}]
  always @(posedge clock) begin
    if (reset)
      replaying <= 1'h0;	// @[SimpleHellaCacheIF.scala:45:26]
    else
      replaying <= ~(nack_head | replay_complete) & (io_replay_ready & _io_replay_valid_output | replaying);	// @[Decoupled.scala:51:35, SimpleHellaCacheIF.scala:45:26, :55:41, :65:52, :66:55, :90:{27,39}, :91:{19,39,51}]
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[SimpleHellaCacheIF.scala:72:9]
      if (~reset & ~(~_nackq_io_enq_valid_T_1 | _nackq_io_enq_ready)) begin	// @[SimpleHellaCacheIF.scala:44:21, :70:39, :72:{9,10,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[SimpleHellaCacheIF.scala:72:9]
          $error("Assertion failed: SimpleHellaCacheIF: ReplayQueue nack queue overflow\n    at SimpleHellaCacheIF.scala:72 assert(!nackq.io.enq.valid || nackq.io.enq.ready,\n");	// @[SimpleHellaCacheIF.scala:72:9]
        if (`STOP_COND_)	// @[SimpleHellaCacheIF.scala:72:9]
          $fatal;	// @[SimpleHellaCacheIF.scala:72:9]
      end
      if (~reset & ~(~replay_complete | _nackq_io_deq_valid)) begin	// @[SimpleHellaCacheIF.scala:44:21, :65:52, :77:{9,10,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[SimpleHellaCacheIF.scala:77:9]
          $error("Assertion failed: SimpleHellaCacheIF: ReplayQueue nack queue underflow\n    at SimpleHellaCacheIF.scala:77 assert(!nackq.io.deq.ready || nackq.io.deq.valid,\n");	// @[SimpleHellaCacheIF.scala:77:9]
        if (`STOP_COND_)	// @[SimpleHellaCacheIF.scala:77:9]
          $fatal;	// @[SimpleHellaCacheIF.scala:77:9]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        replaying = _RANDOM_8[14];	// @[SimpleHellaCacheIF.scala:45:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Queue_101 nackq (	// @[SimpleHellaCacheIF.scala:44:21]
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_nackq_io_enq_valid_T_1),	// @[SimpleHellaCacheIF.scala:70:39]
    .io_deq_ready (replay_complete),	// @[SimpleHellaCacheIF.scala:65:52]
    .io_enq_ready (_nackq_io_enq_ready),
    .io_deq_valid (_nackq_io_deq_valid),
    .io_deq_bits  (_nackq_io_deq_bits)
  );
  assign io_replay_valid = _io_replay_valid_output;	// @[SimpleHellaCacheIF.scala:55:41]
  assign io_replay_bits_addr = 40'h0;	// @[SimpleHellaCacheIF.scala:35:17]
  assign io_replay_bits_tag = 8'h0;	// @[SimpleHellaCacheIF.scala:35:17]
  assign io_replay_bits_cmd = 5'h0;	// @[SimpleHellaCacheIF.scala:35:17]
  assign io_replay_bits_size = 2'h0;	// @[SimpleHellaCacheIF.scala:35:17]
  assign io_replay_bits_signed = 1'h0;
  assign io_replay_bits_dprv = 2'h0;	// @[SimpleHellaCacheIF.scala:35:17]
  assign io_replay_bits_dv = 1'h0;
  assign io_replay_bits_phys = 1'h0;
  assign io_replay_bits_no_alloc = 1'h0;
  assign io_replay_bits_no_xcpt = 1'h0;
  assign io_replay_bits_data = 64'h0;	// @[SimpleHellaCacheIF.scala:35:17]
  assign io_replay_bits_mask = 8'h0;	// @[SimpleHellaCacheIF.scala:35:17]
endmodule

