// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module ZeroWriter(
  input         clock,
                reset,
                io_req_valid,
                io_req_bits_laddr_is_acc_addr,
                io_req_bits_laddr_accumulate,
  input  [13:0] io_req_bits_laddr_data,
  input  [15:0] io_req_bits_tag_cols,
  input  [7:0]  io_req_bits_tag_pixel_repeats,
                io_req_bits_tag_cmd_id,
  input  [6:0]  io_req_bits_cols,
  input  [15:0] io_req_bits_block_stride,
  input         io_resp_ready,
  output        io_req_ready,
                io_resp_valid,
  output [15:0] io_resp_bits_tag_cols,
  output [7:0]  io_resp_bits_tag_pixel_repeats,
                io_resp_bits_tag_cmd_id,
  output        io_resp_bits_laddr_is_acc_addr,
                io_resp_bits_laddr_accumulate,
  output [13:0] io_resp_bits_laddr_data,
  output        io_resp_bits_mask_0,
                io_resp_bits_mask_1,
                io_resp_bits_mask_2,
                io_resp_bits_mask_3,
                io_resp_bits_mask_4,
                io_resp_bits_mask_5,
                io_resp_bits_mask_6,
                io_resp_bits_mask_7,
                io_resp_bits_mask_8,
                io_resp_bits_mask_9,
                io_resp_bits_mask_10,
                io_resp_bits_mask_11,
                io_resp_bits_mask_12,
                io_resp_bits_mask_13,
                io_resp_bits_mask_14,
                io_resp_bits_mask_15,
                io_resp_bits_last
);

  reg         req_valid;	// @[ZeroWriter.scala:37:16]
  reg         req_bits_laddr_is_acc_addr;	// @[ZeroWriter.scala:37:16]
  reg         req_bits_laddr_accumulate;	// @[ZeroWriter.scala:37:16]
  reg  [13:0] req_bits_laddr_data;	// @[ZeroWriter.scala:37:16]
  reg  [15:0] req_bits_tag_cols;	// @[ZeroWriter.scala:37:16]
  reg  [7:0]  req_bits_tag_pixel_repeats;	// @[ZeroWriter.scala:37:16]
  reg  [7:0]  req_bits_tag_cmd_id;	// @[ZeroWriter.scala:37:16]
  reg  [6:0]  req_bits_cols;	// @[ZeroWriter.scala:37:16]
  reg  [15:0] req_bits_block_stride;	// @[ZeroWriter.scala:37:16]
  reg  [5:0]  col_counter;	// @[ZeroWriter.scala:39:24]
  wire [6:0]  _GEN = {1'h0, col_counter};	// @[ZeroWriter.scala:37:16, :39:24, :52:76]
  wire [6:0]  _next_col_counter_T_3 = _GEN + 7'h10;	// @[ZeroWriter.scala:37:16, :52:76, :53:36]
  wire        _T = io_resp_ready & req_valid;	// @[Decoupled.scala:51:35, ZeroWriter.scala:37:16]
  wire        _next_col_counter_T_4 = _next_col_counter_T_3 > req_bits_cols - 7'h1;	// @[Util.scala:39:28, :43:17, ZeroWriter.scala:37:16, :53:36]
  wire        _GEN_0 = _T & (_next_col_counter_T_4 ? 6'h0 : _next_col_counter_T_3[5:0]) == 6'h0;	// @[Decoupled.scala:51:35, Mux.scala:101:16, Util.scala:41:15, :43:17, :139:13, ZeroWriter.scala:37:16, :53:36, :56:23, :61:{28,37}]
  wire        _io_req_ready_output = _GEN_0 | ~req_valid;	// @[Util.scala:139:13, ZeroWriter.scala:37:16, :41:{16,19}, :56:23, :61:37, :63:20]
  wire        _T_2 = _io_req_ready_output & io_req_valid;	// @[Decoupled.scala:51:35, ZeroWriter.scala:41:16, :56:23, :61:37, :63:20]
  always @(posedge clock) begin
    if (reset)
      req_valid <= 1'h0;	// @[ZeroWriter.scala:37:16]
    else
      req_valid <= _T_2 | ~_GEN_0 & req_valid;	// @[Decoupled.scala:51:35, Util.scala:134:13, :139:13, ZeroWriter.scala:37:16, :56:23, :61:37, :67:22]
    if (_T_2) begin	// @[Decoupled.scala:51:35]
      req_bits_laddr_is_acc_addr <= io_req_bits_laddr_is_acc_addr;	// @[ZeroWriter.scala:37:16]
      req_bits_laddr_accumulate <= io_req_bits_laddr_accumulate;	// @[ZeroWriter.scala:37:16]
      req_bits_laddr_data <= io_req_bits_laddr_data;	// @[ZeroWriter.scala:37:16]
      req_bits_tag_cols <= io_req_bits_tag_cols;	// @[ZeroWriter.scala:37:16]
      req_bits_tag_pixel_repeats <= io_req_bits_tag_pixel_repeats;	// @[ZeroWriter.scala:37:16]
      req_bits_tag_cmd_id <= io_req_bits_tag_cmd_id;	// @[ZeroWriter.scala:37:16]
      req_bits_cols <= io_req_bits_cols;	// @[ZeroWriter.scala:37:16]
      req_bits_block_stride <= io_req_bits_block_stride;	// @[ZeroWriter.scala:37:16]
      col_counter <= 6'h0;	// @[Mux.scala:101:16, ZeroWriter.scala:39:24]
    end
    else if (_T) begin	// @[Decoupled.scala:51:35]
      if (_next_col_counter_T_4)	// @[Util.scala:43:17]
        col_counter <= 6'h0;	// @[Mux.scala:101:16, ZeroWriter.scala:39:24]
      else	// @[Util.scala:43:17]
        col_counter <= _next_col_counter_T_3[5:0];	// @[Util.scala:41:15, ZeroWriter.scala:39:24, :53:36]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        req_valid = _RANDOM_0[0];	// @[ZeroWriter.scala:37:16]
        req_bits_laddr_is_acc_addr = _RANDOM_0[1];	// @[ZeroWriter.scala:37:16]
        req_bits_laddr_accumulate = _RANDOM_0[2];	// @[ZeroWriter.scala:37:16]
        req_bits_laddr_data = {_RANDOM_0[31:19], _RANDOM_1[0]};	// @[ZeroWriter.scala:37:16]
        req_bits_tag_cols = _RANDOM_3[24:9];	// @[ZeroWriter.scala:37:16]
        req_bits_tag_pixel_repeats = {_RANDOM_5[31:27], _RANDOM_6[2:0]};	// @[ZeroWriter.scala:37:16]
        req_bits_tag_cmd_id = _RANDOM_6[10:3];	// @[ZeroWriter.scala:37:16]
        req_bits_cols = _RANDOM_9[26:20];	// @[ZeroWriter.scala:37:16]
        req_bits_block_stride = {_RANDOM_9[31:27], _RANDOM_10[10:0]};	// @[ZeroWriter.scala:37:16]
        col_counter = _RANDOM_10[16:11];	// @[ZeroWriter.scala:37:16, :39:24]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_req_ready = _io_req_ready_output;	// @[ZeroWriter.scala:41:16, :56:23, :61:37, :63:20]
  assign io_resp_valid = req_valid;	// @[ZeroWriter.scala:37:16]
  assign io_resp_bits_tag_cols = req_bits_tag_cols;	// @[ZeroWriter.scala:37:16]
  assign io_resp_bits_tag_pixel_repeats = req_bits_tag_pixel_repeats;	// @[ZeroWriter.scala:37:16]
  assign io_resp_bits_tag_cmd_id = req_bits_tag_cmd_id;	// @[ZeroWriter.scala:37:16]
  assign io_resp_bits_laddr_is_acc_addr = req_bits_laddr_is_acc_addr;	// @[ZeroWriter.scala:37:16]
  assign io_resp_bits_laddr_accumulate = req_bits_laddr_accumulate;	// @[ZeroWriter.scala:37:16]
  assign io_resp_bits_laddr_data = req_bits_laddr_data + req_bits_block_stride[13:0] * {8'h0, col_counter / 6'h10};	// @[LocalAddr.scala:51:25, ZeroWriter.scala:37:16, :39:24, :44:64, :48:20]
  assign io_resp_bits_mask_0 = _GEN < req_bits_cols;	// @[ZeroWriter.scala:37:16, :52:{76,82}]
  assign io_resp_bits_mask_1 = {1'h0, col_counter + 6'h1} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_2 = {1'h0, col_counter + 6'h2} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_3 = {1'h0, col_counter + 6'h3} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_4 = {1'h0, col_counter + 6'h4} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_5 = {1'h0, col_counter + 6'h5} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_6 = {1'h0, col_counter + 6'h6} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_7 = {1'h0, col_counter + 6'h7} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_8 = {1'h0, col_counter + 6'h8} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_9 = {1'h0, col_counter + 6'h9} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_10 = {1'h0, col_counter + 6'hA} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_11 = {1'h0, col_counter + 6'hB} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_12 = {1'h0, col_counter + 6'hC} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_13 = {1'h0, col_counter + 6'hD} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_14 = {1'h0, col_counter + 6'hE} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_mask_15 = {1'h0, col_counter + 6'hF} < req_bits_cols;	// @[ZeroWriter.scala:37:16, :39:24, :52:{76,82}]
  assign io_resp_bits_last = _next_col_counter_T_3 >= req_bits_cols;	// @[ZeroWriter.scala:37:16, :53:{36,52}]
endmodule

