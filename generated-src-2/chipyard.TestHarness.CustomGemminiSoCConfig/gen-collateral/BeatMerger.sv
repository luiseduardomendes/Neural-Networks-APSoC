// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module BeatMerger(
  input          clock,
                 reset,
                 io_req_valid,
  input  [5:0]   io_req_bits_shift,
  input  [13:0]  io_req_bits_addr,
  input          io_req_bits_is_acc,
                 io_req_bits_accumulate,
                 io_req_bits_has_acc_bitwidth,
  input  [15:0]  io_req_bits_block_stride,
  input  [8:0]   io_req_bits_spad_row_offset,
  input  [2:0]   io_req_bits_lg_len_req,
  input  [6:0]   io_req_bits_bytes_to_read,
  input          io_in_valid,
  input  [127:0] io_in_bits,
  input          io_out_ready,
  output         io_req_ready,
                 io_in_ready,
                 io_out_valid,
  output [511:0] io_out_bits_data,
  output [13:0]  io_out_bits_addr,
  output         io_out_bits_is_acc,
                 io_out_bits_accumulate,
                 io_out_bits_has_acc_bitwidth,
                 io_out_bits_mask_0,
                 io_out_bits_mask_1,
                 io_out_bits_mask_2,
                 io_out_bits_mask_3,
                 io_out_bits_mask_4,
                 io_out_bits_mask_5,
                 io_out_bits_mask_6,
                 io_out_bits_mask_7,
                 io_out_bits_mask_8,
                 io_out_bits_mask_9,
                 io_out_bits_mask_10,
                 io_out_bits_mask_11,
                 io_out_bits_mask_12,
                 io_out_bits_mask_13,
                 io_out_bits_mask_14,
                 io_out_bits_mask_15,
                 io_out_bits_mask_16,
                 io_out_bits_mask_17,
                 io_out_bits_mask_18,
                 io_out_bits_mask_19,
                 io_out_bits_mask_20,
                 io_out_bits_mask_21,
                 io_out_bits_mask_22,
                 io_out_bits_mask_23,
                 io_out_bits_mask_24,
                 io_out_bits_mask_25,
                 io_out_bits_mask_26,
                 io_out_bits_mask_27,
                 io_out_bits_mask_28,
                 io_out_bits_mask_29,
                 io_out_bits_mask_30,
                 io_out_bits_mask_31,
                 io_out_bits_mask_32,
                 io_out_bits_mask_33,
                 io_out_bits_mask_34,
                 io_out_bits_mask_35,
                 io_out_bits_mask_36,
                 io_out_bits_mask_37,
                 io_out_bits_mask_38,
                 io_out_bits_mask_39,
                 io_out_bits_mask_40,
                 io_out_bits_mask_41,
                 io_out_bits_mask_42,
                 io_out_bits_mask_43,
                 io_out_bits_mask_44,
                 io_out_bits_mask_45,
                 io_out_bits_mask_46,
                 io_out_bits_mask_47,
                 io_out_bits_mask_48,
                 io_out_bits_mask_49,
                 io_out_bits_mask_50,
                 io_out_bits_mask_51,
                 io_out_bits_mask_52,
                 io_out_bits_mask_53,
                 io_out_bits_mask_54,
                 io_out_bits_mask_55,
                 io_out_bits_mask_56,
                 io_out_bits_mask_57,
                 io_out_bits_mask_58,
                 io_out_bits_mask_59,
                 io_out_bits_mask_60,
                 io_out_bits_mask_61,
                 io_out_bits_mask_62,
                 io_out_bits_mask_63,
                 io_out_bits_last
);

  wire          _io_req_ready_output;	// @[BeatMerger.scala:64:16, :98:22, :101:78, :103:20]
  reg           req_valid;	// @[BeatMerger.scala:43:16]
  reg  [5:0]    req_bits_shift;	// @[BeatMerger.scala:43:16]
  reg  [13:0]   req_bits_addr;	// @[BeatMerger.scala:43:16]
  reg           req_bits_is_acc;	// @[BeatMerger.scala:43:16]
  reg           req_bits_accumulate;	// @[BeatMerger.scala:43:16]
  reg           req_bits_has_acc_bitwidth;	// @[BeatMerger.scala:43:16]
  reg  [15:0]   req_bits_block_stride;	// @[BeatMerger.scala:43:16]
  reg  [8:0]    req_bits_spad_row_offset;	// @[BeatMerger.scala:43:16]
  reg  [2:0]    req_bits_lg_len_req;	// @[BeatMerger.scala:43:16]
  reg  [6:0]    req_bits_bytes_to_read;	// @[BeatMerger.scala:43:16]
  reg  [511:0]  buffer;	// @[BeatMerger.scala:46:19]
  wire [6:0]    rowBytes = req_bits_has_acc_bitwidth ? 7'h40 : 7'h10;	// @[BeatMerger.scala:43:16, :48:21]
  reg  [6:0]    bytesSent;	// @[BeatMerger.scala:50:22]
  reg  [6:0]    bytesRead;	// @[BeatMerger.scala:51:22]
  wire [6:0]    _GEN = {1'h0, req_bits_shift};	// @[BeatMerger.scala:43:16, :52:43]
  wire [7:0]    _GEN_0 = {1'h0, bytesRead};	// @[BeatMerger.scala:43:16, :51:22, :52:71]
  wire [6:0]    bytesReadAfterShift = bytesRead > _GEN ? bytesRead - _GEN : 7'h0;	// @[BeatMerger.scala:51:22, :52:{32,43,71}]
  wire [6:0]    usefulBytesRead = bytesReadAfterShift < req_bits_bytes_to_read ? bytesReadAfterShift : req_bits_bytes_to_read;	// @[BeatMerger.scala:43:16, :52:32, Util.scala:109:{8,12}]
  wire          _spad_row_offset_T_63 = bytesSent == 7'h0;	// @[BeatMerger.scala:50:22, :52:32, :57:41]
  wire [9:0]    _bytesSent_next_T_4 = {3'h0, bytesSent} + {1'h0, {2'h0, rowBytes} - (_spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0)};	// @[BeatMerger.scala:43:16, :48:21, :50:22, :52:71, :57:{30,41}, :58:32, Util.scala:35:11]
  wire [8:0]    _GEN_1 = {2'h0, req_bits_bytes_to_read};	// @[BeatMerger.scala:43:16, :52:71, Util.scala:35:8]
  wire [8:0]    bytesSent_next = _bytesSent_next_T_4 > {3'h0, req_bits_bytes_to_read} ? _GEN_1 : _bytesSent_next_T_4[8:0];	// @[BeatMerger.scala:43:16, :58:32, Util.scala:35:{8,11,16,30}]
  wire          last_sending = bytesSent_next == _GEN_1;	// @[BeatMerger.scala:61:37, Util.scala:35:8]
  wire [7:0]    _T_389 = 8'h1 << req_bits_lg_len_req;	// @[BeatMerger.scala:43:16, :62:42]
  wire          _T_397 = _io_req_ready_output & io_req_valid;	// @[BeatMerger.scala:64:16, :98:22, :101:78, :103:20, Decoupled.scala:51:35]
  wire          _io_in_ready_output = _T_397 | req_valid & _GEN_0 != _T_389;	// @[BeatMerger.scala:43:16, :52:71, :62:42, :66:{30,44,57}, Decoupled.scala:51:35]
  wire          _io_out_valid_output = req_valid & usefulBytesRead > bytesSent & (usefulBytesRead - bytesSent >= rowBytes | usefulBytesRead == req_bits_bytes_to_read);	// @[BeatMerger.scala:43:16, :48:21, :50:22, :68:{48,60,80,92,104}, :69:21, Util.scala:109:8]
  wire [8702:0] _io_out_bits_data_T_5 = {8191'h0, buffer >> {502'h0, bytesSent, 3'h0}} << (_spad_row_offset_T_63 ? {1'h0, req_bits_spad_row_offset, 3'h0} : 13'h0);	// @[BeatMerger.scala:43:16, :46:19, :50:22, :57:41, :58:32, :70:{31,53,59,104}]
  wire [8:0]    spad_row_offset = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [9:0]    _GEN_2 = {3'h0, req_bits_bytes_to_read - bytesSent};	// @[BeatMerger.scala:43:16, :50:22, :58:32, :74:{29,56}]
  wire [8:0]    spad_row_offset_1 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [9:0]    _T_9 = {1'h0, spad_row_offset_1} + _GEN_2;	// @[BeatMerger.scala:43:16, :72:30, :74:29]
  wire [8:0]    spad_row_offset_2 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_3 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [9:0]    _T_21 = {1'h0, spad_row_offset_3} + _GEN_2;	// @[BeatMerger.scala:43:16, :72:30, :74:29]
  wire [8:0]    spad_row_offset_4 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_5 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_6 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_7 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [9:0]    _T_45 = {1'h0, spad_row_offset_7} + _GEN_2;	// @[BeatMerger.scala:43:16, :72:30, :74:29]
  wire [8:0]    spad_row_offset_8 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_9 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_10 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_11 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_12 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_13 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_14 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_15 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [9:0]    _T_93 = {1'h0, spad_row_offset_15} + _GEN_2;	// @[BeatMerger.scala:43:16, :72:30, :74:29]
  wire [8:0]    spad_row_offset_16 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_17 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_18 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_19 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_20 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_21 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_22 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_23 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_24 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_25 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_26 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_27 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_28 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_29 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_30 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_31 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [9:0]    _T_189 = {1'h0, spad_row_offset_31} + _GEN_2;	// @[BeatMerger.scala:43:16, :72:30, :74:29]
  wire [8:0]    spad_row_offset_32 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_33 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_34 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_35 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_36 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_37 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_38 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_39 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_40 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_41 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_42 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_43 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_44 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_45 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_46 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_47 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_48 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_49 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_50 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_51 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_52 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_53 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_54 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_55 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_56 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_57 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_58 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_59 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_60 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_61 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_62 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [8:0]    spad_row_offset_63 = _spad_row_offset_T_63 ? req_bits_spad_row_offset : 9'h0;	// @[BeatMerger.scala:43:16, :57:{30,41}, :72:30]
  wire [9:0]    _T_381 = {1'h0, spad_row_offset_63} + _GEN_2;	// @[BeatMerger.scala:43:16, :72:30, :74:29]
  wire [8:0]    io_out_bits_addr_total_bytes_sent = req_bits_spad_row_offset + {2'h0, bytesSent};	// @[BeatMerger.scala:43:16, :50:22, :52:71, :77:53, Util.scala:35:11]
  wire          _T_388 = io_out_ready & _io_out_valid_output;	// @[BeatMerger.scala:68:60, Decoupled.scala:51:35]
  wire          _T_391 = last_sending & _GEN_0 == _T_389;	// @[BeatMerger.scala:52:71, :61:37, :62:42, :101:{24,37}]
  assign _io_req_ready_output = _T_388 & _T_391 | ~req_valid;	// @[BeatMerger.scala:43:16, :64:{16,19}, :98:22, :101:{24,78}, :103:20, Decoupled.scala:51:35]
  wire [2174:0] _GEN_3 = {2165'h0, _T_397 ? 7'h0 : usefulBytesRead, 3'h0};	// @[BeatMerger.scala:52:32, :58:32, :116:38, :126:52, Decoupled.scala:51:35, Util.scala:109:8]
  wire [7:0]    current_len_req = 8'h1 << (_T_397 ? io_req_bits_lg_len_req : req_bits_lg_len_req);	// @[BeatMerger.scala:43:16, :62:42, :118:33, :119:32, Decoupled.scala:51:35]
  wire [7:0]    _bytesRead_T_2 = {1'h0, _T_397 ? 7'h0 : bytesRead} + 8'h10;	// @[BeatMerger.scala:43:16, :51:22, :52:32, :62:34, :114:32, Decoupled.scala:51:35, Util.scala:35:11]
  wire          _T_399 = bytesSent == req_bits_bytes_to_read;	// @[BeatMerger.scala:43:16, :50:22, :94:15]
  wire          _T_387 = _GEN_0 == _T_389 & _T_399;	// @[BeatMerger.scala:52:71, :62:42, :93:{19,59}, :94:15]
  wire          _T_393 = _io_in_ready_output & io_in_valid;	// @[BeatMerger.scala:66:30, Decoupled.scala:51:35]
  wire [6:0]    _T_395 = {1'h0, _T_397 ? io_req_bits_shift : req_bits_shift} - (_T_397 ? 7'h0 : bytesRead - bytesReadAfterShift);	// @[BeatMerger.scala:43:16, :51:22, :52:32, :53:34, :115:37, :117:28, :121:25, Decoupled.scala:51:35]
  wire [127:0]  _GEN_4 = {118'h0, _T_395, 3'h0};	// @[BeatMerger.scala:58:32, :121:25, :126:41]
  wire [2174:0] _buffer_T_2 = {2047'h0, io_in_bits >> _GEN_4} << _GEN_3;	// @[BeatMerger.scala:126:{41,52}, :128:{48,59}]
  wire [2174:0] _mask_T_2 = {2047'h0, 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >> _GEN_4} << _GEN_3;	// @[BeatMerger.scala:126:{23,41,52}]
  always @(posedge clock) begin
    req_valid <= ~(reset | _T_393 & ~_T_397 & _T_399 & _T_389 - _GEN_0 < 8'h11) & (_T_397 | (_T_388 ? ~(_T_391 | _T_387) & req_valid : ~_T_387 & req_valid));	// @[BeatMerger.scala:43:16, :52:71, :62:{34,42,73}, :93:59, :94:{15,43}, :98:22, :101:{24,78}, :107:22, :113:21, :133:{11,81}, :138:23, :139:15, Decoupled.scala:51:35, Util.scala:134:13, :139:13]
    if (_T_397) begin	// @[Decoupled.scala:51:35]
      req_bits_shift <= io_req_bits_shift;	// @[BeatMerger.scala:43:16]
      req_bits_addr <= io_req_bits_addr;	// @[BeatMerger.scala:43:16]
      req_bits_is_acc <= io_req_bits_is_acc;	// @[BeatMerger.scala:43:16]
      req_bits_accumulate <= io_req_bits_accumulate;	// @[BeatMerger.scala:43:16]
      req_bits_has_acc_bitwidth <= io_req_bits_has_acc_bitwidth;	// @[BeatMerger.scala:43:16]
      req_bits_block_stride <= io_req_bits_block_stride;	// @[BeatMerger.scala:43:16]
      req_bits_spad_row_offset <= io_req_bits_spad_row_offset;	// @[BeatMerger.scala:43:16]
      req_bits_lg_len_req <= io_req_bits_lg_len_req;	// @[BeatMerger.scala:43:16]
      req_bits_bytes_to_read <= io_req_bits_bytes_to_read;	// @[BeatMerger.scala:43:16]
      bytesSent <= 7'h0;	// @[BeatMerger.scala:50:22, :52:32]
    end
    else if (_T_388)	// @[Decoupled.scala:51:35]
      bytesSent <= bytesSent_next[6:0];	// @[BeatMerger.scala:50:22, :99:15, Util.scala:35:8]
    if (_T_393 & _T_395 < 7'h11)	// @[BeatMerger.scala:46:19, :113:21, :121:{25,50}, :123:7, :128:14, Decoupled.scala:51:35]
      buffer <= buffer & ~(_mask_T_2[511:0]) | _buffer_T_2[511:0];	// @[BeatMerger.scala:46:19, :126:{19,52}, :128:{25,33,59}]
    if (_T_393)	// @[Decoupled.scala:51:35]
      bytesRead <= _bytesRead_T_2 > current_len_req ? current_len_req[6:0] : _bytesRead_T_2[6:0];	// @[BeatMerger.scala:51:22, :119:32, Util.scala:35:{8,11,16,30}]
    else if (_T_397)	// @[Decoupled.scala:51:35]
      bytesRead <= 7'h0;	// @[BeatMerger.scala:51:22, :52:32]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        req_valid = _RANDOM_0[0];	// @[BeatMerger.scala:43:16]
        req_bits_shift = _RANDOM_0[6:1];	// @[BeatMerger.scala:43:16]
        req_bits_addr = _RANDOM_0[20:7];	// @[BeatMerger.scala:43:16]
        req_bits_is_acc = _RANDOM_0[21];	// @[BeatMerger.scala:43:16]
        req_bits_accumulate = _RANDOM_0[22];	// @[BeatMerger.scala:43:16]
        req_bits_has_acc_bitwidth = _RANDOM_0[23];	// @[BeatMerger.scala:43:16]
        req_bits_block_stride = _RANDOM_3[15:0];	// @[BeatMerger.scala:43:16]
        req_bits_spad_row_offset = _RANDOM_3[24:16];	// @[BeatMerger.scala:43:16]
        req_bits_lg_len_req = _RANDOM_3[27:25];	// @[BeatMerger.scala:43:16]
        req_bits_bytes_to_read = {_RANDOM_3[31:28], _RANDOM_4[2:0]};	// @[BeatMerger.scala:43:16]
        buffer = {_RANDOM_4[31:4], _RANDOM_5, _RANDOM_6, _RANDOM_7, _RANDOM_8, _RANDOM_9, _RANDOM_10, _RANDOM_11, _RANDOM_12, _RANDOM_13, _RANDOM_14, _RANDOM_15, _RANDOM_16, _RANDOM_17, _RANDOM_18, _RANDOM_19, _RANDOM_20[3:0]};	// @[BeatMerger.scala:43:16, :46:19]
        bytesSent = _RANDOM_20[10:4];	// @[BeatMerger.scala:46:19, :50:22]
        bytesRead = _RANDOM_20[17:11];	// @[BeatMerger.scala:46:19, :51:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_req_ready = _io_req_ready_output;	// @[BeatMerger.scala:64:16, :98:22, :101:78, :103:20]
  assign io_in_ready = _io_in_ready_output;	// @[BeatMerger.scala:66:30]
  assign io_out_valid = _io_out_valid_output;	// @[BeatMerger.scala:68:60]
  assign io_out_bits_data = _io_out_bits_data_T_5[511:0];	// @[BeatMerger.scala:70:{20,53}]
  assign io_out_bits_addr = req_bits_addr + req_bits_block_stride[13:0] * {5'h0, req_bits_has_acc_bitwidth ? io_out_bits_addr_total_bytes_sent / 9'h40 : io_out_bits_addr_total_bytes_sent / 9'h10};	// @[BeatMerger.scala:43:16, :62:42, :76:{37,61}, :77:53, :78:8, :82:84, :83:85]
  assign io_out_bits_is_acc = req_bits_is_acc;	// @[BeatMerger.scala:43:16]
  assign io_out_bits_accumulate = req_bits_accumulate;	// @[BeatMerger.scala:43:16]
  assign io_out_bits_has_acc_bitwidth = req_bits_has_acc_bitwidth;	// @[BeatMerger.scala:43:16]
  assign io_out_bits_mask_0 = spad_row_offset == 9'h0 & (|({1'h0, spad_row_offset} + _GEN_2));	// @[BeatMerger.scala:43:16, :57:30, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_1 = spad_row_offset_1 < 9'h2 & (|(_T_9[9:1]));	// @[BeatMerger.scala:72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_2 = spad_row_offset_2 < 9'h3 & {1'h0, spad_row_offset_2} + _GEN_2 > 10'h2;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_3 = spad_row_offset_3 < 9'h4 & (|(_T_21[9:2]));	// @[BeatMerger.scala:72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_4 = spad_row_offset_4 < 9'h5 & {1'h0, spad_row_offset_4} + _GEN_2 > 10'h4;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_5 = spad_row_offset_5 < 9'h6 & {1'h0, spad_row_offset_5} + _GEN_2 > 10'h5;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_6 = spad_row_offset_6 < 9'h7 & {1'h0, spad_row_offset_6} + _GEN_2 > 10'h6;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_7 = spad_row_offset_7 < 9'h8 & (|(_T_45[9:3]));	// @[BeatMerger.scala:72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_8 = spad_row_offset_8 < 9'h9 & {1'h0, spad_row_offset_8} + _GEN_2 > 10'h8;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_9 = spad_row_offset_9 < 9'hA & {1'h0, spad_row_offset_9} + _GEN_2 > 10'h9;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_10 = spad_row_offset_10 < 9'hB & {1'h0, spad_row_offset_10} + _GEN_2 > 10'hA;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_11 = spad_row_offset_11 < 9'hC & {1'h0, spad_row_offset_11} + _GEN_2 > 10'hB;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_12 = spad_row_offset_12 < 9'hD & {1'h0, spad_row_offset_12} + _GEN_2 > 10'hC;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_13 = spad_row_offset_13 < 9'hE & {1'h0, spad_row_offset_13} + _GEN_2 > 10'hD;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_14 = spad_row_offset_14 < 9'hF & {1'h0, spad_row_offset_14} + _GEN_2 > 10'hE;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_15 = spad_row_offset_15 < 9'h10 & (|(_T_93[9:4]));	// @[BeatMerger.scala:72:30, :73:{9,28}, :74:{11,29}, :83:85]
  assign io_out_bits_mask_16 = spad_row_offset_16 < 9'h11 & {1'h0, spad_row_offset_16} + _GEN_2 > 10'h10;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_17 = spad_row_offset_17 < 9'h12 & {1'h0, spad_row_offset_17} + _GEN_2 > 10'h11;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_18 = spad_row_offset_18 < 9'h13 & {1'h0, spad_row_offset_18} + _GEN_2 > 10'h12;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_19 = spad_row_offset_19 < 9'h14 & {1'h0, spad_row_offset_19} + _GEN_2 > 10'h13;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_20 = spad_row_offset_20 < 9'h15 & {1'h0, spad_row_offset_20} + _GEN_2 > 10'h14;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_21 = spad_row_offset_21 < 9'h16 & {1'h0, spad_row_offset_21} + _GEN_2 > 10'h15;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_22 = spad_row_offset_22 < 9'h17 & {1'h0, spad_row_offset_22} + _GEN_2 > 10'h16;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_23 = spad_row_offset_23 < 9'h18 & {1'h0, spad_row_offset_23} + _GEN_2 > 10'h17;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_24 = spad_row_offset_24 < 9'h19 & {1'h0, spad_row_offset_24} + _GEN_2 > 10'h18;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_25 = spad_row_offset_25 < 9'h1A & {1'h0, spad_row_offset_25} + _GEN_2 > 10'h19;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_26 = spad_row_offset_26 < 9'h1B & {1'h0, spad_row_offset_26} + _GEN_2 > 10'h1A;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_27 = spad_row_offset_27 < 9'h1C & {1'h0, spad_row_offset_27} + _GEN_2 > 10'h1B;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_28 = spad_row_offset_28 < 9'h1D & {1'h0, spad_row_offset_28} + _GEN_2 > 10'h1C;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_29 = spad_row_offset_29 < 9'h1E & {1'h0, spad_row_offset_29} + _GEN_2 > 10'h1D;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_30 = spad_row_offset_30 < 9'h1F & {1'h0, spad_row_offset_30} + _GEN_2 > 10'h1E;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_31 = spad_row_offset_31 < 9'h20 & (|(_T_189[9:5]));	// @[BeatMerger.scala:72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_32 = spad_row_offset_32 < 9'h21 & {1'h0, spad_row_offset_32} + _GEN_2 > 10'h20;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_33 = spad_row_offset_33 < 9'h22 & {1'h0, spad_row_offset_33} + _GEN_2 > 10'h21;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_34 = spad_row_offset_34 < 9'h23 & {1'h0, spad_row_offset_34} + _GEN_2 > 10'h22;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_35 = spad_row_offset_35 < 9'h24 & {1'h0, spad_row_offset_35} + _GEN_2 > 10'h23;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_36 = spad_row_offset_36 < 9'h25 & {1'h0, spad_row_offset_36} + _GEN_2 > 10'h24;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_37 = spad_row_offset_37 < 9'h26 & {1'h0, spad_row_offset_37} + _GEN_2 > 10'h25;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_38 = spad_row_offset_38 < 9'h27 & {1'h0, spad_row_offset_38} + _GEN_2 > 10'h26;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_39 = spad_row_offset_39 < 9'h28 & {1'h0, spad_row_offset_39} + _GEN_2 > 10'h27;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_40 = spad_row_offset_40 < 9'h29 & {1'h0, spad_row_offset_40} + _GEN_2 > 10'h28;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_41 = spad_row_offset_41 < 9'h2A & {1'h0, spad_row_offset_41} + _GEN_2 > 10'h29;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_42 = spad_row_offset_42 < 9'h2B & {1'h0, spad_row_offset_42} + _GEN_2 > 10'h2A;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_43 = spad_row_offset_43 < 9'h2C & {1'h0, spad_row_offset_43} + _GEN_2 > 10'h2B;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_44 = spad_row_offset_44 < 9'h2D & {1'h0, spad_row_offset_44} + _GEN_2 > 10'h2C;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_45 = spad_row_offset_45 < 9'h2E & {1'h0, spad_row_offset_45} + _GEN_2 > 10'h2D;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_46 = spad_row_offset_46 < 9'h2F & {1'h0, spad_row_offset_46} + _GEN_2 > 10'h2E;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_47 = spad_row_offset_47 < 9'h30 & {1'h0, spad_row_offset_47} + _GEN_2 > 10'h2F;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_48 = spad_row_offset_48 < 9'h31 & {1'h0, spad_row_offset_48} + _GEN_2 > 10'h30;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_49 = spad_row_offset_49 < 9'h32 & {1'h0, spad_row_offset_49} + _GEN_2 > 10'h31;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_50 = spad_row_offset_50 < 9'h33 & {1'h0, spad_row_offset_50} + _GEN_2 > 10'h32;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_51 = spad_row_offset_51 < 9'h34 & {1'h0, spad_row_offset_51} + _GEN_2 > 10'h33;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_52 = spad_row_offset_52 < 9'h35 & {1'h0, spad_row_offset_52} + _GEN_2 > 10'h34;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_53 = spad_row_offset_53 < 9'h36 & {1'h0, spad_row_offset_53} + _GEN_2 > 10'h35;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_54 = spad_row_offset_54 < 9'h37 & {1'h0, spad_row_offset_54} + _GEN_2 > 10'h36;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_55 = spad_row_offset_55 < 9'h38 & {1'h0, spad_row_offset_55} + _GEN_2 > 10'h37;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_56 = spad_row_offset_56 < 9'h39 & {1'h0, spad_row_offset_56} + _GEN_2 > 10'h38;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_57 = spad_row_offset_57 < 9'h3A & {1'h0, spad_row_offset_57} + _GEN_2 > 10'h39;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_58 = spad_row_offset_58 < 9'h3B & {1'h0, spad_row_offset_58} + _GEN_2 > 10'h3A;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_59 = spad_row_offset_59 < 9'h3C & {1'h0, spad_row_offset_59} + _GEN_2 > 10'h3B;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_60 = spad_row_offset_60 < 9'h3D & {1'h0, spad_row_offset_60} + _GEN_2 > 10'h3C;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_61 = spad_row_offset_61 < 9'h3E & {1'h0, spad_row_offset_61} + _GEN_2 > 10'h3D;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_62 = spad_row_offset_62 < 9'h3F & {1'h0, spad_row_offset_62} + _GEN_2 > 10'h3E;	// @[BeatMerger.scala:43:16, :72:30, :73:{9,28}, :74:{11,29}]
  assign io_out_bits_mask_63 = spad_row_offset_63 < 9'h40 & (|(_T_381[9:6]));	// @[BeatMerger.scala:72:30, :73:{9,28}, :74:{11,29}, :82:84]
  assign io_out_bits_last = last_sending;	// @[BeatMerger.scala:61:37]
endmodule

