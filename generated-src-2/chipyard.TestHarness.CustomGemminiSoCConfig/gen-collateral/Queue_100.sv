// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module Queue_100(
  input         clock,
                reset,
                io_enq_valid,
  input  [6:0]  io_enq_bits_inst_funct,
  input  [4:0]  io_enq_bits_inst_rs2,
                io_enq_bits_inst_rs1,
  input         io_enq_bits_inst_xd,
                io_enq_bits_inst_xs1,
                io_enq_bits_inst_xs2,
  input  [4:0]  io_enq_bits_inst_rd,
  input  [6:0]  io_enq_bits_inst_opcode,
  input  [63:0] io_enq_bits_rs1,
                io_enq_bits_rs2,
  input         io_enq_bits_status_debug,
                io_enq_bits_status_cease,
                io_enq_bits_status_wfi,
  input  [31:0] io_enq_bits_status_isa,
  input  [1:0]  io_enq_bits_status_dprv,
                io_enq_bits_status_prv,
  input         io_enq_bits_status_gva,
                io_enq_bits_status_tsr,
                io_enq_bits_status_tw,
                io_enq_bits_status_tvm,
                io_enq_bits_status_mxr,
                io_enq_bits_status_sum,
                io_enq_bits_status_mprv,
  input  [1:0]  io_enq_bits_status_fs,
                io_enq_bits_status_mpp,
  input         io_enq_bits_status_spp,
                io_enq_bits_status_mpie,
                io_enq_bits_status_spie,
                io_enq_bits_status_mie,
                io_enq_bits_status_sie,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [6:0]  io_deq_bits_inst_funct,
  output [4:0]  io_deq_bits_inst_rs2,
                io_deq_bits_inst_rs1,
  output        io_deq_bits_inst_xd,
                io_deq_bits_inst_xs1,
                io_deq_bits_inst_xs2,
  output [4:0]  io_deq_bits_inst_rd,
  output [6:0]  io_deq_bits_inst_opcode,
  output [63:0] io_deq_bits_rs1,
                io_deq_bits_rs2,
  output        io_deq_bits_status_debug,
                io_deq_bits_status_cease,
                io_deq_bits_status_wfi,
  output [31:0] io_deq_bits_status_isa,
  output [1:0]  io_deq_bits_status_dprv,
  output        io_deq_bits_status_dv,
  output [1:0]  io_deq_bits_status_prv,
  output        io_deq_bits_status_v,
                io_deq_bits_status_sd,
  output [22:0] io_deq_bits_status_zero2,
  output        io_deq_bits_status_mpv,
                io_deq_bits_status_gva,
                io_deq_bits_status_mbe,
                io_deq_bits_status_sbe,
  output [1:0]  io_deq_bits_status_sxl,
                io_deq_bits_status_uxl,
  output        io_deq_bits_status_sd_rv32,
  output [7:0]  io_deq_bits_status_zero1,
  output        io_deq_bits_status_tsr,
                io_deq_bits_status_tw,
                io_deq_bits_status_tvm,
                io_deq_bits_status_mxr,
                io_deq_bits_status_sum,
                io_deq_bits_status_mprv,
  output [1:0]  io_deq_bits_status_xs,
                io_deq_bits_status_fs,
                io_deq_bits_status_mpp,
                io_deq_bits_status_vs,
  output        io_deq_bits_status_spp,
                io_deq_bits_status_mpie,
                io_deq_bits_status_ube,
                io_deq_bits_status_spie,
                io_deq_bits_status_upie,
                io_deq_bits_status_mie,
                io_deq_bits_status_hie,
                io_deq_bits_status_sie,
                io_deq_bits_status_uie
);

  wire [264:0] _ram_ext_R0_data;	// @[Decoupled.scala:273:95]
  reg          enq_ptr_value;	// @[Counter.scala:61:40]
  reg          deq_ptr_value;	// @[Counter.scala:61:40]
  reg          maybe_full;	// @[Decoupled.scala:276:27]
  wire         ptr_match = enq_ptr_value == deq_ptr_value;	// @[Counter.scala:61:40, Decoupled.scala:277:33]
  wire         empty = ptr_match & ~maybe_full;	// @[Decoupled.scala:276:27, :277:33, :278:{25,28}]
  wire         full = ptr_match & maybe_full;	// @[Decoupled.scala:276:27, :277:33, :279:24]
  wire         do_enq = ~full & io_enq_valid;	// @[Decoupled.scala:51:35, :279:24, :303:19]
  wire         do_deq = io_deq_ready & ~empty;	// @[Decoupled.scala:51:35, :278:25, :302:19]
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;	// @[Counter.scala:61:40]
      deq_ptr_value <= 1'h0;	// @[Counter.scala:61:40]
      maybe_full <= 1'h0;	// @[Decoupled.scala:276:27]
    end
    else begin
      if (do_enq)	// @[Decoupled.scala:51:35]
        enq_ptr_value <= enq_ptr_value - 1'h1;	// @[Counter.scala:61:40, :77:24]
      if (do_deq)	// @[Decoupled.scala:51:35]
        deq_ptr_value <= deq_ptr_value - 1'h1;	// @[Counter.scala:61:40, :77:24]
      if (do_enq != do_deq)	// @[Decoupled.scala:51:35, :293:15]
        maybe_full <= do_enq;	// @[Decoupled.scala:51:35, :276:27]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        enq_ptr_value = _RANDOM_0[0];	// @[Counter.scala:61:40]
        deq_ptr_value = _RANDOM_0[1];	// @[Counter.scala:61:40]
        maybe_full = _RANDOM_0[2];	// @[Counter.scala:61:40, Decoupled.scala:276:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ram_combMem_42 ram_ext (	// @[Decoupled.scala:273:95]
    .R0_addr (deq_ptr_value),	// @[Counter.scala:61:40]
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),	// @[Counter.scala:61:40]
    .W0_en   (do_enq),	// @[Decoupled.scala:51:35]
    .W0_clk  (clock),
    .W0_data ({1'h0, io_enq_bits_status_sie, 1'h0, io_enq_bits_status_mie, 1'h0, io_enq_bits_status_spie, 1'h0, io_enq_bits_status_mpie, io_enq_bits_status_spp, 2'h0, io_enq_bits_status_mpp, io_enq_bits_status_fs, 2'h3, io_enq_bits_status_mprv, io_enq_bits_status_sum, io_enq_bits_status_mxr, io_enq_bits_status_tvm, io_enq_bits_status_tw, io_enq_bits_status_tsr, 15'h28, io_enq_bits_status_gva, 26'h2, io_enq_bits_status_prv, 1'h0, io_enq_bits_status_dprv, io_enq_bits_status_isa, io_enq_bits_status_wfi, io_enq_bits_status_cease, io_enq_bits_status_debug, io_enq_bits_rs2, io_enq_bits_rs1, io_enq_bits_inst_opcode, io_enq_bits_inst_rd, io_enq_bits_inst_xs2, io_enq_bits_inst_xs1, io_enq_bits_inst_xd, io_enq_bits_inst_rs1, io_enq_bits_inst_rs2, io_enq_bits_inst_funct}),	// @[Decoupled.scala:273:95]
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = ~full;	// @[Decoupled.scala:279:24, :303:19]
  assign io_deq_valid = ~empty;	// @[Decoupled.scala:278:25, :302:19]
  assign io_deq_bits_inst_funct = _ram_ext_R0_data[6:0];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_inst_rs2 = _ram_ext_R0_data[11:7];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_inst_rs1 = _ram_ext_R0_data[16:12];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_inst_xd = _ram_ext_R0_data[17];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_inst_xs1 = _ram_ext_R0_data[18];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_inst_xs2 = _ram_ext_R0_data[19];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_inst_rd = _ram_ext_R0_data[24:20];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_inst_opcode = _ram_ext_R0_data[31:25];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_rs1 = _ram_ext_R0_data[95:32];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_rs2 = _ram_ext_R0_data[159:96];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_debug = _ram_ext_R0_data[160];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_cease = _ram_ext_R0_data[161];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_wfi = _ram_ext_R0_data[162];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_isa = _ram_ext_R0_data[194:163];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_dprv = _ram_ext_R0_data[196:195];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_dv = _ram_ext_R0_data[197];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_prv = _ram_ext_R0_data[199:198];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_v = _ram_ext_R0_data[200];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sd = _ram_ext_R0_data[201];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_zero2 = _ram_ext_R0_data[224:202];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mpv = _ram_ext_R0_data[225];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_gva = _ram_ext_R0_data[226];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mbe = _ram_ext_R0_data[227];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sbe = _ram_ext_R0_data[228];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sxl = _ram_ext_R0_data[230:229];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_uxl = _ram_ext_R0_data[232:231];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sd_rv32 = _ram_ext_R0_data[233];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_zero1 = _ram_ext_R0_data[241:234];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_tsr = _ram_ext_R0_data[242];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_tw = _ram_ext_R0_data[243];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_tvm = _ram_ext_R0_data[244];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mxr = _ram_ext_R0_data[245];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sum = _ram_ext_R0_data[246];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mprv = _ram_ext_R0_data[247];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_xs = _ram_ext_R0_data[249:248];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_fs = _ram_ext_R0_data[251:250];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mpp = _ram_ext_R0_data[253:252];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_vs = _ram_ext_R0_data[255:254];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_spp = _ram_ext_R0_data[256];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mpie = _ram_ext_R0_data[257];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_ube = _ram_ext_R0_data[258];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_spie = _ram_ext_R0_data[259];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_upie = _ram_ext_R0_data[260];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_mie = _ram_ext_R0_data[261];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_hie = _ram_ext_R0_data[262];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_sie = _ram_ext_R0_data[263];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_status_uie = _ram_ext_R0_data[264];	// @[Decoupled.scala:273:95]
endmodule

