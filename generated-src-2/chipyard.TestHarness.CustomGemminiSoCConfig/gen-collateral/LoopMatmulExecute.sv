// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module LoopMatmulExecute(
  input         clock,
                reset,
                io_req_valid,
  input  [15:0] io_req_bits_max_j,
                io_req_bits_max_k,
                io_req_bits_max_i,
  input  [3:0]  io_req_bits_pad_j,
                io_req_bits_pad_k,
                io_req_bits_pad_i,
  input         io_req_bits_a_tranpose,
                io_req_bits_b_tranpose,
                io_req_bits_accumulate,
  input  [13:0] io_req_bits_a_addr_start,
  input  [14:0] io_req_bits_b_addr_end,
  input  [9:0]  io_req_bits_c_addr_start,
  input         io_req_bits_loop_id,
                io_cmd_ready,
  input  [15:0] io_ld_ka,
                io_ld_kb,
                io_ld_j,
                io_ld_i,
  input         io_lda_completed,
                io_ldb_completed,
                io_ldd_completed,
                io_rob_overloaded,
  output        io_req_ready,
                io_cmd_valid,
  output [6:0]  io_cmd_bits_inst_funct,
  output [63:0] io_cmd_bits_rs1,
                io_cmd_bits_rs2,
  output [15:0] io_k,
                io_j,
                io_i,
  output        io_idle,
                io_loop_id
);

  reg  [1:0]  state;	// @[LoopMatmul.scala:368:22]
  reg  [15:0] req_max_j;	// @[LoopMatmul.scala:370:16]
  reg  [15:0] req_max_k;	// @[LoopMatmul.scala:370:16]
  reg  [15:0] req_max_i;	// @[LoopMatmul.scala:370:16]
  reg  [3:0]  req_pad_j;	// @[LoopMatmul.scala:370:16]
  reg  [3:0]  req_pad_k;	// @[LoopMatmul.scala:370:16]
  reg  [3:0]  req_pad_i;	// @[LoopMatmul.scala:370:16]
  reg         req_a_tranpose;	// @[LoopMatmul.scala:370:16]
  reg         req_b_tranpose;	// @[LoopMatmul.scala:370:16]
  reg         req_accumulate;	// @[LoopMatmul.scala:370:16]
  reg  [13:0] req_a_addr_start;	// @[LoopMatmul.scala:370:16]
  reg  [14:0] req_b_addr_end;	// @[LoopMatmul.scala:370:16]
  reg  [9:0]  req_c_addr_start;	// @[LoopMatmul.scala:370:16]
  reg         req_loop_id;	// @[LoopMatmul.scala:370:16]
  wire [24:0] _GEN = {9'h0, req_max_j};	// @[LoopMatmul.scala:370:16, :373:49, :387:54]
  reg  [15:0] k;	// @[LoopMatmul.scala:375:14]
  reg  [15:0] j;	// @[LoopMatmul.scala:376:14]
  reg  [15:0] i;	// @[LoopMatmul.scala:377:14]
  wire [28:0] _GEN_0 = {15'h0, req_a_addr_start} + {{9'h0, req_a_tranpose ? k : i} * {9'h0, req_a_tranpose ? req_max_i : req_max_k} + {9'h0, req_a_tranpose ? i : k}, 4'h0};	// @[LoopMatmul.scala:370:16, :375:14, :377:14, :379:18, :380:18, :384:22, :387:{33,42,54}, :391:34]
  wire [28:0] _GEN_1 = {14'h0, req_b_addr_end} - {{9'h0, req_max_k} * _GEN, 4'h0} + {{9'h0, req_b_tranpose ? j : k} * {9'h0, req_b_tranpose ? req_max_k : req_max_j} + {9'h0, req_b_tranpose ? k : j}, 4'h0};	// @[LoopMatmul.scala:370:16, :373:{37,49}, :375:14, :376:14, :381:18, :382:18, :385:22, :387:54, :388:{29,38,50}, :391:34]
  wire [28:0] _GEN_2 = {19'h0, req_c_addr_start} + {{9'h0, i} * _GEN + {9'h0, j}, 4'h0};	// @[LoopMatmul.scala:370:16, :373:49, :376:14, :377:14, :387:54, :389:{29,34,46}, :391:34]
  wire [15:0] _a_cols_T_1 = req_max_k - 16'h1;	// @[LoopMatmul.scala:370:16, :391:51]
  wire [15:0] _a_rows_T_1 = req_max_i - 16'h1;	// @[LoopMatmul.scala:370:16, :392:51]
  wire [15:0] _b_cols_T_1 = req_max_j - 16'h1;	// @[LoopMatmul.scala:370:16, :393:51]
  wire        _comp_cmd_inst_funct_T = i == 16'h0;	// @[LoopMatmul.scala:377:14, :406:35, Mux.scala:101:16]
  wire        _io_req_ready_output = state == 2'h0;	// @[LoopMatmul.scala:368:22, :399:11, :437:25]
  wire        _ldb_ahead_T_2 = io_ld_ka == k;	// @[LoopMatmul.scala:375:14, :444:65]
  wire        _io_cmd_valid_output = (|state) & ~io_rob_overloaded & (io_lda_completed | io_ld_ka > k | _ldb_ahead_T_2 & io_ld_i > i) & (io_ldb_completed | io_ld_kb > k | _ldb_ahead_T_2 & io_ld_j > j) & io_ldd_completed;	// @[LoopMatmul.scala:368:22, :375:14, :376:14, :377:14, :444:{48,52,65,71,82}, :445:{48,52,71,82}, :449:{25,37,56}]
  wire        _T_1 = state == 2'h1;	// @[LoopMatmul.scala:368:22, :450:28, :472:11]
  wire        _T = io_cmd_ready & _io_cmd_valid_output;	// @[Decoupled.scala:51:35, LoopMatmul.scala:449:56]
  wire [16:0] _next_i_T_3 = {1'h0, i} + 17'h1;	// @[LoopMatmul.scala:368:22, :377:14, :391:51, Util.scala:41:15]
  wire        _next_i_T_4 = _next_i_T_3 > {1'h0, _a_rows_T_1};	// @[LoopMatmul.scala:368:22, :392:51, Util.scala:41:15, :43:17]
  wire [15:0] next_i = _next_i_T_4 ? 16'h0 : _next_i_T_3[15:0];	// @[Mux.scala:101:16, Util.scala:41:15, :43:17]
  wire [16:0] _next_j_T_4 = {1'h0, j} + 17'h1;	// @[LoopMatmul.scala:368:22, :376:14, :391:51, Util.scala:41:15]
  wire        _next_j_T_5 = _next_j_T_4 > {1'h0, _b_cols_T_1};	// @[LoopMatmul.scala:368:22, :393:51, Util.scala:41:15, :43:17]
  wire        _state_T_1 = ((|next_i) ? j : _next_j_T_5 ? 16'h0 : _next_j_T_4[15:0]) == 16'h0;	// @[LoopMatmul.scala:376:14, :459:55, :460:55, Mux.scala:101:16, Util.scala:41:15, :43:17]
  wire        _next_k_T_2 = _state_T_1 & ~(|next_i);	// @[LoopMatmul.scala:459:55, :460:{55,63}, Mux.scala:101:16]
  wire [16:0] _next_k_T_6 = {1'h0, k} + 17'h1;	// @[LoopMatmul.scala:368:22, :375:14, :391:51, Util.scala:41:15]
  wire        _next_k_T_7 = _next_k_T_6 > {1'h0, _a_cols_T_1};	// @[LoopMatmul.scala:368:22, :391:51, Util.scala:41:15, :43:17]
  wire        _T_2 = _io_req_ready_output & io_req_valid;	// @[Decoupled.scala:51:35, LoopMatmul.scala:437:25]
  always @(posedge clock) begin
    if (reset)
      state <= 2'h0;	// @[LoopMatmul.scala:368:22, :399:11]
    else if (_T_2)	// @[Decoupled.scala:51:35]
      state <= 2'h1;	// @[LoopMatmul.scala:368:22, :472:11]
    else if (_T) begin	// @[Decoupled.scala:51:35]
      if (_T_1)	// @[LoopMatmul.scala:450:28]
        state <= 2'h2;	// @[LoopMatmul.scala:368:22, :456:13]
      else	// @[LoopMatmul.scala:450:28]
        state <= {1'h0, ~((_next_k_T_2 ? (_next_k_T_7 ? 16'h0 : _next_k_T_6[15:0]) : k) == 16'h0 & _state_T_1 & ~(|next_i))};	// @[LoopMatmul.scala:368:22, :375:14, :459:55, :460:{55,63}, :466:{13,19,27,53}, Mux.scala:101:16, Util.scala:41:15, :43:17]
    end
    if (_T_2) begin	// @[Decoupled.scala:51:35]
      req_max_j <= io_req_bits_max_j;	// @[LoopMatmul.scala:370:16]
      req_max_k <= io_req_bits_max_k;	// @[LoopMatmul.scala:370:16]
      req_max_i <= io_req_bits_max_i;	// @[LoopMatmul.scala:370:16]
      req_pad_j <= io_req_bits_pad_j;	// @[LoopMatmul.scala:370:16]
      req_pad_k <= io_req_bits_pad_k;	// @[LoopMatmul.scala:370:16]
      req_pad_i <= io_req_bits_pad_i;	// @[LoopMatmul.scala:370:16]
      req_a_tranpose <= io_req_bits_a_tranpose;	// @[LoopMatmul.scala:370:16]
      req_b_tranpose <= io_req_bits_b_tranpose;	// @[LoopMatmul.scala:370:16]
      req_accumulate <= io_req_bits_accumulate;	// @[LoopMatmul.scala:370:16]
      req_a_addr_start <= io_req_bits_a_addr_start;	// @[LoopMatmul.scala:370:16]
      req_b_addr_end <= io_req_bits_b_addr_end;	// @[LoopMatmul.scala:370:16]
      req_c_addr_start <= io_req_bits_c_addr_start;	// @[LoopMatmul.scala:370:16]
      req_loop_id <= io_req_bits_loop_id;	// @[LoopMatmul.scala:370:16]
      k <= 16'h0;	// @[LoopMatmul.scala:375:14, Mux.scala:101:16]
      j <= 16'h0;	// @[LoopMatmul.scala:376:14, Mux.scala:101:16]
      i <= 16'h0;	// @[LoopMatmul.scala:377:14, Mux.scala:101:16]
    end
    else begin	// @[Decoupled.scala:51:35]
      if (~_T | _T_1 | ~_next_k_T_2) begin	// @[Decoupled.scala:51:35, LoopMatmul.scala:375:14, :450:28, :454:22, :455:26, :460:63, Util.scala:42:8]
      end
      else if (_next_k_T_7)	// @[Util.scala:43:17]
        k <= 16'h0;	// @[LoopMatmul.scala:375:14, Mux.scala:101:16]
      else	// @[Util.scala:43:17]
        k <= _next_k_T_6[15:0];	// @[LoopMatmul.scala:375:14, Util.scala:41:15]
      if (~_T | _T_1 | (|next_i)) begin	// @[Decoupled.scala:51:35, LoopMatmul.scala:375:14, :376:14, :450:28, :454:22, :455:26, :459:55, Mux.scala:101:16]
      end
      else if (_next_j_T_5)	// @[Util.scala:43:17]
        j <= 16'h0;	// @[LoopMatmul.scala:376:14, Mux.scala:101:16]
      else	// @[Util.scala:43:17]
        j <= _next_j_T_4[15:0];	// @[LoopMatmul.scala:376:14, Util.scala:41:15]
      if (~_T | _T_1) begin	// @[Decoupled.scala:51:35, LoopMatmul.scala:375:14, :377:14, :450:28, :454:22, :455:26]
      end
      else if (_next_i_T_4)	// @[Util.scala:43:17]
        i <= 16'h0;	// @[LoopMatmul.scala:377:14, Mux.scala:101:16]
      else	// @[Util.scala:43:17]
        i <= _next_i_T_3[15:0];	// @[LoopMatmul.scala:377:14, Util.scala:41:15]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[LoopMatmul.scala:478:9]
      if (~reset & (|state) & req_a_tranpose & req_b_tranpose) begin	// @[LoopMatmul.scala:368:22, :370:16, :449:25, :478:9]
        if (`ASSERT_VERBOSE_COND_)	// @[LoopMatmul.scala:478:9]
          $error("Assertion failed\n    at LoopMatmul.scala:478 assert(!(state =/= idle && req.a_tranpose && req.b_tranpose))\n");	// @[LoopMatmul.scala:478:9]
        if (`STOP_COND_)	// @[LoopMatmul.scala:478:9]
          $fatal;	// @[LoopMatmul.scala:478:9]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        state = _RANDOM_0[1:0];	// @[LoopMatmul.scala:368:22]
        req_max_j = _RANDOM_0[17:2];	// @[LoopMatmul.scala:368:22, :370:16]
        req_max_k = {_RANDOM_0[31:18], _RANDOM_1[1:0]};	// @[LoopMatmul.scala:368:22, :370:16]
        req_max_i = _RANDOM_1[17:2];	// @[LoopMatmul.scala:370:16]
        req_pad_j = _RANDOM_1[21:18];	// @[LoopMatmul.scala:370:16]
        req_pad_k = _RANDOM_1[25:22];	// @[LoopMatmul.scala:370:16]
        req_pad_i = _RANDOM_1[29:26];	// @[LoopMatmul.scala:370:16]
        req_a_tranpose = _RANDOM_1[30];	// @[LoopMatmul.scala:370:16]
        req_b_tranpose = _RANDOM_1[31];	// @[LoopMatmul.scala:370:16]
        req_accumulate = _RANDOM_2[0];	// @[LoopMatmul.scala:370:16]
        req_a_addr_start = _RANDOM_2[14:1];	// @[LoopMatmul.scala:370:16]
        req_b_addr_end = _RANDOM_2[29:15];	// @[LoopMatmul.scala:370:16]
        req_c_addr_start = {_RANDOM_2[31:30], _RANDOM_3[7:0]};	// @[LoopMatmul.scala:370:16]
        req_loop_id = _RANDOM_3[8];	// @[LoopMatmul.scala:370:16]
        k = _RANDOM_3[24:9];	// @[LoopMatmul.scala:370:16, :375:14]
        j = {_RANDOM_3[31:25], _RANDOM_4[8:0]};	// @[LoopMatmul.scala:370:16, :376:14]
        i = _RANDOM_4[24:9];	// @[LoopMatmul.scala:376:14, :377:14]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_req_ready = _io_req_ready_output;	// @[LoopMatmul.scala:437:25]
  assign io_cmd_valid = _io_cmd_valid_output;	// @[LoopMatmul.scala:449:56]
  assign io_cmd_bits_inst_funct = _T_1 ? 7'h6 : {6'h2, ~_comp_cmd_inst_funct_T};	// @[LoopMatmul.scala:400:22, :406:{32,35}, :420:23, :450:{21,28}]
  assign io_cmd_bits_rs1 = {11'h0, _T_1 ? {5'h10 - {1'h0, k == _a_cols_T_1 ? req_pad_k : 4'h0}, 11'h0, 5'h10 - {1'h0, j == _b_cols_T_1 ? req_pad_j : 4'h0}, {3{~_comp_cmd_inst_funct_T}}, _comp_cmd_inst_funct_T ? _GEN_1[28:26] : 3'h0, 11'h0, ~_comp_cmd_inst_funct_T | _GEN_1[14], _comp_cmd_inst_funct_T ? _GEN_1[13:0] : 14'h3FFF} : {5'h10 - {1'h0, i == _a_rows_T_1 ? req_pad_i : 4'h0}, 11'h0, 5'h10 - {1'h0, k == _a_cols_T_1 ? req_pad_k : 4'h0}, 3'h0, _GEN_0[28:26], 11'h0, _GEN_0[14:0]}};	// @[LocalAddr.scala:99:13, :108:37, :141:12, LoopMatmul.scala:368:22, :370:16, :375:14, :376:14, :377:14, :387:33, :388:29, :391:{29,34,37,51}, :392:{29,34,37,51}, :393:{29,34,37,51}, :394:{29,34,37}, :403:15, :406:{32,35}, :415:30, :434:32, :450:{21,28}]
  assign io_cmd_bits_rs2 = _T_1 ? {11'h0, 5'h10 - {1'h0, i == _a_rows_T_1 ? req_pad_i : 4'h0}, 11'h0, 5'h10 - {1'h0, j == _b_cols_T_1 ? req_pad_j : 4'h0}, 1'h1, req_accumulate | (|k), 1'h0, _GEN_2[28:26], 11'h0, _GEN_2[14:0]} : 64'h100010E0007FFF;	// @[LocalAddr.scala:108:37, LoopMatmul.scala:368:22, :370:16, :375:14, :376:14, :377:14, :389:29, :391:{29,34,51}, :392:51, :393:51, :395:{29,34,37}, :396:{29,34,37}, :403:15, :413:{106,111}, :416:30, :435:32, :450:{21,28}]
  assign io_k = k;	// @[LoopMatmul.scala:375:14]
  assign io_j = j;	// @[LoopMatmul.scala:376:14]
  assign io_i = i;	// @[LoopMatmul.scala:377:14]
  assign io_idle = _io_req_ready_output;	// @[LoopMatmul.scala:437:25]
  assign io_loop_id = req_loop_id;	// @[LoopMatmul.scala:370:16]
endmodule

