// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module MulAddRecFN(
  input  [32:0] io_a,
                io_b,
  output [32:0] io_out
);

  wire [4:0]  _roundRawFNToRecFN_io_exceptionFlags;	// @[MulAddRecFN.scala:337:15]
  wire        _mulAddRecFNToRaw_postMul_io_invalidExc;	// @[MulAddRecFN.scala:317:15]
  wire        _mulAddRecFNToRaw_postMul_io_rawOut_isNaN;	// @[MulAddRecFN.scala:317:15]
  wire        _mulAddRecFNToRaw_postMul_io_rawOut_isInf;	// @[MulAddRecFN.scala:317:15]
  wire        _mulAddRecFNToRaw_postMul_io_rawOut_isZero;	// @[MulAddRecFN.scala:317:15]
  wire        _mulAddRecFNToRaw_postMul_io_rawOut_sign;	// @[MulAddRecFN.scala:317:15]
  wire [9:0]  _mulAddRecFNToRaw_postMul_io_rawOut_sExp;	// @[MulAddRecFN.scala:317:15]
  wire [26:0] _mulAddRecFNToRaw_postMul_io_rawOut_sig;	// @[MulAddRecFN.scala:317:15]
  wire [23:0] _mulAddRecFNToRaw_preMul_io_mulAddA;	// @[MulAddRecFN.scala:315:15]
  wire [23:0] _mulAddRecFNToRaw_preMul_io_mulAddB;	// @[MulAddRecFN.scala:315:15]
  wire [47:0] _mulAddRecFNToRaw_preMul_io_mulAddC;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isSigNaNAny;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNAOrB;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfA;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroA;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfB;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroB;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_signProd;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isNaNC;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isInfC;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_isZeroC;	// @[MulAddRecFN.scala:315:15]
  wire [9:0]  _mulAddRecFNToRaw_preMul_io_toPostMul_sExpSum;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_doSubMags;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_CIsDominant;	// @[MulAddRecFN.scala:315:15]
  wire [4:0]  _mulAddRecFNToRaw_preMul_io_toPostMul_CDom_CAlignDist;	// @[MulAddRecFN.scala:315:15]
  wire [25:0] _mulAddRecFNToRaw_preMul_io_toPostMul_highAlignedSigC;	// @[MulAddRecFN.scala:315:15]
  wire        _mulAddRecFNToRaw_preMul_io_toPostMul_bit0AlignedSigC;	// @[MulAddRecFN.scala:315:15]
  MulAddRecFNToRaw_preMul mulAddRecFNToRaw_preMul (	// @[MulAddRecFN.scala:315:15]
    .io_op                        (2'h0),
    .io_a                         (io_a),
    .io_b                         (io_b),
    .io_c                         (33'h0),
    .io_mulAddA                   (_mulAddRecFNToRaw_preMul_io_mulAddA),
    .io_mulAddB                   (_mulAddRecFNToRaw_preMul_io_mulAddB),
    .io_mulAddC                   (_mulAddRecFNToRaw_preMul_io_mulAddC),
    .io_toPostMul_isSigNaNAny     (_mulAddRecFNToRaw_preMul_io_toPostMul_isSigNaNAny),
    .io_toPostMul_isNaNAOrB       (_mulAddRecFNToRaw_preMul_io_toPostMul_isNaNAOrB),
    .io_toPostMul_isInfA          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfA),
    .io_toPostMul_isZeroA         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroA),
    .io_toPostMul_isInfB          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfB),
    .io_toPostMul_isZeroB         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroB),
    .io_toPostMul_signProd        (_mulAddRecFNToRaw_preMul_io_toPostMul_signProd),
    .io_toPostMul_isNaNC          (_mulAddRecFNToRaw_preMul_io_toPostMul_isNaNC),
    .io_toPostMul_isInfC          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfC),
    .io_toPostMul_isZeroC         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroC),
    .io_toPostMul_sExpSum         (_mulAddRecFNToRaw_preMul_io_toPostMul_sExpSum),
    .io_toPostMul_doSubMags       (_mulAddRecFNToRaw_preMul_io_toPostMul_doSubMags),
    .io_toPostMul_CIsDominant     (_mulAddRecFNToRaw_preMul_io_toPostMul_CIsDominant),
    .io_toPostMul_CDom_CAlignDist (_mulAddRecFNToRaw_preMul_io_toPostMul_CDom_CAlignDist),
    .io_toPostMul_highAlignedSigC (_mulAddRecFNToRaw_preMul_io_toPostMul_highAlignedSigC),
    .io_toPostMul_bit0AlignedSigC (_mulAddRecFNToRaw_preMul_io_toPostMul_bit0AlignedSigC)
  );
  MulAddRecFNToRaw_postMul mulAddRecFNToRaw_postMul (	// @[MulAddRecFN.scala:317:15]
    .io_fromPreMul_isSigNaNAny     (_mulAddRecFNToRaw_preMul_io_toPostMul_isSigNaNAny),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_isNaNAOrB       (_mulAddRecFNToRaw_preMul_io_toPostMul_isNaNAOrB),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_isInfA          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfA),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_isZeroA         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroA),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_isInfB          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfB),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_isZeroB         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroB),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_signProd        (_mulAddRecFNToRaw_preMul_io_toPostMul_signProd),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_isNaNC          (_mulAddRecFNToRaw_preMul_io_toPostMul_isNaNC),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_isInfC          (_mulAddRecFNToRaw_preMul_io_toPostMul_isInfC),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_isZeroC         (_mulAddRecFNToRaw_preMul_io_toPostMul_isZeroC),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_sExpSum         (_mulAddRecFNToRaw_preMul_io_toPostMul_sExpSum),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_doSubMags       (_mulAddRecFNToRaw_preMul_io_toPostMul_doSubMags),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_CIsDominant     (_mulAddRecFNToRaw_preMul_io_toPostMul_CIsDominant),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_CDom_CAlignDist (_mulAddRecFNToRaw_preMul_io_toPostMul_CDom_CAlignDist),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_highAlignedSigC (_mulAddRecFNToRaw_preMul_io_toPostMul_highAlignedSigC),	// @[MulAddRecFN.scala:315:15]
    .io_fromPreMul_bit0AlignedSigC (_mulAddRecFNToRaw_preMul_io_toPostMul_bit0AlignedSigC),	// @[MulAddRecFN.scala:315:15]
    .io_mulAddResult               ({1'h0, {24'h0, _mulAddRecFNToRaw_preMul_io_mulAddA} * {24'h0, _mulAddRecFNToRaw_preMul_io_mulAddB}} + {1'h0, _mulAddRecFNToRaw_preMul_io_mulAddC}),	// @[MulAddRecFN.scala:315:15, :325:45, :326:50, :339:39]
    .io_roundingMode               (3'h0),
    .io_invalidExc                 (_mulAddRecFNToRaw_postMul_io_invalidExc),
    .io_rawOut_isNaN               (_mulAddRecFNToRaw_postMul_io_rawOut_isNaN),
    .io_rawOut_isInf               (_mulAddRecFNToRaw_postMul_io_rawOut_isInf),
    .io_rawOut_isZero              (_mulAddRecFNToRaw_postMul_io_rawOut_isZero),
    .io_rawOut_sign                (_mulAddRecFNToRaw_postMul_io_rawOut_sign),
    .io_rawOut_sExp                (_mulAddRecFNToRaw_postMul_io_rawOut_sExp),
    .io_rawOut_sig                 (_mulAddRecFNToRaw_postMul_io_rawOut_sig)
  );
  RoundRawFNToRecFN roundRawFNToRecFN (	// @[MulAddRecFN.scala:337:15]
    .io_invalidExc     (_mulAddRecFNToRaw_postMul_io_invalidExc),	// @[MulAddRecFN.scala:317:15]
    .io_infiniteExc    (1'h0),	// @[MulAddRecFN.scala:339:39]
    .io_in_isNaN       (_mulAddRecFNToRaw_postMul_io_rawOut_isNaN),	// @[MulAddRecFN.scala:317:15]
    .io_in_isInf       (_mulAddRecFNToRaw_postMul_io_rawOut_isInf),	// @[MulAddRecFN.scala:317:15]
    .io_in_isZero      (_mulAddRecFNToRaw_postMul_io_rawOut_isZero),	// @[MulAddRecFN.scala:317:15]
    .io_in_sign        (_mulAddRecFNToRaw_postMul_io_rawOut_sign),	// @[MulAddRecFN.scala:317:15]
    .io_in_sExp        (_mulAddRecFNToRaw_postMul_io_rawOut_sExp),	// @[MulAddRecFN.scala:317:15]
    .io_in_sig         (_mulAddRecFNToRaw_postMul_io_rawOut_sig),	// @[MulAddRecFN.scala:317:15]
    .io_roundingMode   (3'h0),
    .io_detectTininess (1'h1),
    .io_out            (io_out),
    .io_exceptionFlags (_roundRawFNToRecFN_io_exceptionFlags)
  );
endmodule

