// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module Queue_97(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_perform_mul_pre,
                io_enq_bits_perform_single_mul,
                io_enq_bits_perform_single_preload,
  input  [1:0]  io_enq_bits_a_bank,
                io_enq_bits_b_bank,
                io_enq_bits_d_bank,
  input         io_enq_bits_a_bank_acc,
                io_enq_bits_b_bank_acc,
                io_enq_bits_d_bank_acc,
                io_enq_bits_a_read_from_acc,
                io_enq_bits_b_read_from_acc,
                io_enq_bits_d_read_from_acc,
                io_enq_bits_a_garbage,
                io_enq_bits_b_garbage,
                io_enq_bits_d_garbage,
                io_enq_bits_accumulate_zeros,
                io_enq_bits_preload_zeros,
                io_enq_bits_a_fire,
                io_enq_bits_b_fire,
                io_enq_bits_d_fire,
  input  [4:0]  io_enq_bits_a_unpadded_cols,
                io_enq_bits_b_unpadded_cols,
                io_enq_bits_d_unpadded_cols,
  input         io_enq_bits_c_addr_is_acc_addr,
                io_enq_bits_c_addr_accumulate,
                io_enq_bits_c_addr_read_full_acc_row,
  input  [2:0]  io_enq_bits_c_addr_norm_cmd,
  input  [10:0] io_enq_bits_c_addr_garbage,
  input         io_enq_bits_c_addr_garbage_bit,
  input  [13:0] io_enq_bits_c_addr_data,
  input  [4:0]  io_enq_bits_c_rows,
                io_enq_bits_c_cols,
  input         io_enq_bits_a_transpose,
                io_enq_bits_bd_transpose,
  input  [4:0]  io_enq_bits_total_rows,
  input         io_enq_bits_rob_id_valid,
  input  [5:0]  io_enq_bits_rob_id_bits,
  input         io_enq_bits_dataflow,
                io_enq_bits_prop,
  input  [4:0]  io_enq_bits_shift,
  input         io_enq_bits_first,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_bits_perform_single_mul,
                io_deq_bits_perform_single_preload,
  output [1:0]  io_deq_bits_a_bank,
                io_deq_bits_b_bank,
                io_deq_bits_d_bank,
  output        io_deq_bits_a_bank_acc,
                io_deq_bits_b_bank_acc,
                io_deq_bits_d_bank_acc,
                io_deq_bits_a_read_from_acc,
                io_deq_bits_b_read_from_acc,
                io_deq_bits_d_read_from_acc,
                io_deq_bits_a_garbage,
                io_deq_bits_b_garbage,
                io_deq_bits_d_garbage,
                io_deq_bits_accumulate_zeros,
                io_deq_bits_preload_zeros,
                io_deq_bits_a_fire,
                io_deq_bits_b_fire,
                io_deq_bits_d_fire,
  output [4:0]  io_deq_bits_a_unpadded_cols,
                io_deq_bits_b_unpadded_cols,
                io_deq_bits_d_unpadded_cols,
  output        io_deq_bits_c_addr_is_acc_addr,
                io_deq_bits_c_addr_accumulate,
                io_deq_bits_c_addr_read_full_acc_row,
                io_deq_bits_c_addr_garbage_bit,
  output [13:0] io_deq_bits_c_addr_data,
  output [4:0]  io_deq_bits_c_rows,
                io_deq_bits_c_cols,
  output        io_deq_bits_a_transpose,
                io_deq_bits_bd_transpose,
  output [4:0]  io_deq_bits_total_rows,
  output        io_deq_bits_rob_id_valid,
  output [5:0]  io_deq_bits_rob_id_bits,
  output        io_deq_bits_dataflow,
                io_deq_bits_prop,
  output [4:0]  io_deq_bits_shift,
  output        io_deq_bits_im2colling,
                io_deq_bits_first
);

  wire         _io_enq_ready_output;	// @[Decoupled.scala:303:16, :323:{24,39}]
  wire [102:0] _ram_ext_R0_data;	// @[Decoupled.scala:273:95]
  reg  [2:0]   enq_ptr_value;	// @[Counter.scala:61:40]
  reg  [2:0]   deq_ptr_value;	// @[Counter.scala:61:40]
  reg          maybe_full;	// @[Decoupled.scala:276:27]
  wire         ptr_match = enq_ptr_value == deq_ptr_value;	// @[Counter.scala:61:40, Decoupled.scala:277:33]
  wire         empty = ptr_match & ~maybe_full;	// @[Decoupled.scala:276:27, :277:33, :278:{25,28}]
  wire         do_enq = _io_enq_ready_output & io_enq_valid;	// @[Decoupled.scala:51:35, :303:16, :323:{24,39}]
  assign _io_enq_ready_output = io_deq_ready | ~(ptr_match & maybe_full);	// @[Decoupled.scala:276:27, :277:33, :279:24, :303:{16,19}, :323:{24,39}]
  wire         do_deq = io_deq_ready & ~empty;	// @[Decoupled.scala:51:35, :278:25, :302:19]
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;	// @[Counter.scala:61:40]
      deq_ptr_value <= 3'h0;	// @[Counter.scala:61:40]
      maybe_full <= 1'h0;	// @[Decoupled.scala:276:27]
    end
    else begin
      if (do_enq) begin	// @[Decoupled.scala:51:35]
        if (enq_ptr_value == 3'h4)	// @[Counter.scala:61:40, :73:24]
          enq_ptr_value <= 3'h0;	// @[Counter.scala:61:40]
        else	// @[Counter.scala:73:24]
          enq_ptr_value <= enq_ptr_value + 3'h1;	// @[Counter.scala:61:40, :77:24]
      end
      if (do_deq) begin	// @[Decoupled.scala:51:35]
        if (deq_ptr_value == 3'h4)	// @[Counter.scala:61:40, :73:24]
          deq_ptr_value <= 3'h0;	// @[Counter.scala:61:40]
        else	// @[Counter.scala:73:24]
          deq_ptr_value <= deq_ptr_value + 3'h1;	// @[Counter.scala:61:40, :77:24]
      end
      if (do_enq != do_deq)	// @[Decoupled.scala:51:35, :293:15]
        maybe_full <= do_enq;	// @[Decoupled.scala:51:35, :276:27]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        enq_ptr_value = _RANDOM_0[2:0];	// @[Counter.scala:61:40]
        deq_ptr_value = _RANDOM_0[5:3];	// @[Counter.scala:61:40]
        maybe_full = _RANDOM_0[6];	// @[Counter.scala:61:40, Decoupled.scala:276:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ram_combMem_18 ram_ext (	// @[Decoupled.scala:273:95]
    .R0_addr (deq_ptr_value),	// @[Counter.scala:61:40]
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),	// @[Counter.scala:61:40]
    .W0_en   (do_enq),	// @[Decoupled.scala:51:35]
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_first, 1'h0, io_enq_bits_shift, io_enq_bits_prop, io_enq_bits_dataflow, io_enq_bits_rob_id_bits, io_enq_bits_rob_id_valid, io_enq_bits_total_rows, io_enq_bits_bd_transpose, io_enq_bits_a_transpose, io_enq_bits_c_cols, io_enq_bits_c_rows, io_enq_bits_c_addr_data, io_enq_bits_c_addr_garbage_bit, io_enq_bits_c_addr_garbage, io_enq_bits_c_addr_norm_cmd, io_enq_bits_c_addr_read_full_acc_row, io_enq_bits_c_addr_accumulate, io_enq_bits_c_addr_is_acc_addr, io_enq_bits_d_unpadded_cols, io_enq_bits_b_unpadded_cols, io_enq_bits_a_unpadded_cols, io_enq_bits_d_fire, io_enq_bits_b_fire, io_enq_bits_a_fire, io_enq_bits_preload_zeros, io_enq_bits_accumulate_zeros, io_enq_bits_d_garbage, io_enq_bits_b_garbage, io_enq_bits_a_garbage, io_enq_bits_d_read_from_acc, io_enq_bits_b_read_from_acc, io_enq_bits_a_read_from_acc, io_enq_bits_d_bank_acc, io_enq_bits_b_bank_acc, io_enq_bits_a_bank_acc, io_enq_bits_d_bank, io_enq_bits_b_bank, io_enq_bits_a_bank, io_enq_bits_perform_single_preload, io_enq_bits_perform_single_mul, io_enq_bits_perform_mul_pre}),	// @[Decoupled.scala:273:95]
    .R0_data (_ram_ext_R0_data)
  );
  assign io_enq_ready = _io_enq_ready_output;	// @[Decoupled.scala:303:16, :323:{24,39}]
  assign io_deq_valid = ~empty;	// @[Decoupled.scala:278:25, :302:19]
  assign io_deq_bits_perform_single_mul = _ram_ext_R0_data[1];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_perform_single_preload = _ram_ext_R0_data[2];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_a_bank = _ram_ext_R0_data[4:3];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_b_bank = _ram_ext_R0_data[6:5];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_d_bank = _ram_ext_R0_data[8:7];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_a_bank_acc = _ram_ext_R0_data[9];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_b_bank_acc = _ram_ext_R0_data[10];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_d_bank_acc = _ram_ext_R0_data[11];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_a_read_from_acc = _ram_ext_R0_data[12];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_b_read_from_acc = _ram_ext_R0_data[13];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_d_read_from_acc = _ram_ext_R0_data[14];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_a_garbage = _ram_ext_R0_data[15];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_b_garbage = _ram_ext_R0_data[16];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_d_garbage = _ram_ext_R0_data[17];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_accumulate_zeros = _ram_ext_R0_data[18];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_preload_zeros = _ram_ext_R0_data[19];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_a_fire = _ram_ext_R0_data[20];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_b_fire = _ram_ext_R0_data[21];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_d_fire = _ram_ext_R0_data[22];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_a_unpadded_cols = _ram_ext_R0_data[27:23];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_b_unpadded_cols = _ram_ext_R0_data[32:28];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_d_unpadded_cols = _ram_ext_R0_data[37:33];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_c_addr_is_acc_addr = _ram_ext_R0_data[38];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_c_addr_accumulate = _ram_ext_R0_data[39];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_c_addr_read_full_acc_row = _ram_ext_R0_data[40];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_c_addr_garbage_bit = _ram_ext_R0_data[55];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_c_addr_data = _ram_ext_R0_data[69:56];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_c_rows = _ram_ext_R0_data[74:70];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_c_cols = _ram_ext_R0_data[79:75];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_a_transpose = _ram_ext_R0_data[80];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_bd_transpose = _ram_ext_R0_data[81];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_total_rows = _ram_ext_R0_data[86:82];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_rob_id_valid = _ram_ext_R0_data[87];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_rob_id_bits = _ram_ext_R0_data[93:88];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_dataflow = _ram_ext_R0_data[94];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_prop = _ram_ext_R0_data[95];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_shift = _ram_ext_R0_data[100:96];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_im2colling = _ram_ext_R0_data[101];	// @[Decoupled.scala:273:95]
  assign io_deq_bits_first = _ram_ext_R0_data[102];	// @[Decoupled.scala:273:95]
endmodule

